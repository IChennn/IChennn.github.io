<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Murmuring</title>
    <link>https://ichennn.github.io/post/</link>
    <description>Recent content in Posts on Murmuring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Jun 2024 19:28:23 +0900</lastBuildDate><atom:link href="https://ichennn.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>轉職與轉換環境的一些雜談</title>
      <link>https://ichennn.github.io/blog/2024/06/%E8%BD%89%E8%81%B7%E8%88%87%E8%BD%89%E6%8F%9B%E7%92%B0%E5%A2%83%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9B%9C%E8%AB%87/</link>
      <pubDate>Fri, 21 Jun 2024 19:28:23 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2024/06/%E8%BD%89%E8%81%B7%E8%88%87%E8%BD%89%E6%8F%9B%E7%92%B0%E5%A2%83%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9B%9C%E8%AB%87/</guid>
      <description>前奏 轉職這個事，說來奇妙，在新卒入社的時候，就時不時地圍繞在我的身邊。並非是自己馬上就想轉職，反而是當時的自己覺得公司環境很好，工作內容有趣，完全是一個やる気満々的狀態。同時卻時常聽到看到身邊的人、或公司的前輩來來去去。「某某前輩下個月要離職了，今天開始消化有休。」「某某去了某企業，據說薪水漲了不少。」大概是這種時有耳聞的程度。
那時候覺得「轉職」這件事離自己很遠，明明才剛進公司，還有好多事情不懂，好多人不認識，好多知識要學習，離開這個環境去到另一個全新的地方對當時的我來說完全是個認知以外的事情，既無法理解其中的動力，也無法共感這個話題中的矛盾心境。雖然當時對於公司及工作本身是相對滿意的，但其實也知道自己不會一輩子待在Ｆ社，轉職的那一天遲早會到來，就像是一個還沒被解鎖的遊戲關卡，裡面充滿了未知，而我就像是個低維度的生物無法窺探高維度的世界的一切。
當時問過同一個team的Yさん：「有想過要轉職嗎？」得到的答案是：「這裡還有我想做的事情，所以沒有想過要轉職。」不太確定是不是真心話，但對當時的我來說是一個非常鏗鏘有力的回答。
後來，時間飛逝，我也從新人成了老屁股，是組內除了Yさん以外年資最久的人了。年資帶來的紅利其實不少，除了溝通時少了很多「對前輩說話」的顧慮及緊張（老子我就是前輩哈哈哈），很多看似難解複雜的事情，懂得一些歷史因素後也大概知道該從什麼角度去看，該去哪裡找資料，或至少知道該問誰才能得到答案。工作能夠全遠端，大概兩三個月進一次公司，年休一年20天（加上彈性工時，其實很多時候看個醫生去個銀行這種幾小時就能解決的事情也根本不需要請年休），說真的，滿爽的ＸＤ
再後來，公司的一些組織變革（直白來說就是要被合併了），漸漸地在工作上帶來一些推力，但並沒有讓我不舒服到覺得立刻要換工作的程度，挺多就是抱怨一下，最終也會慢慢習慣。不過壓垮駱駝的也不總是最後一根稻草，除了有一些不太習慣也不太喜歡的工作內容外，還有就是對於自己職涯的焦慮，以及對於薪水的日漸不滿。
說到職涯的焦慮，這也是我不曾預料的，畢竟當年新卒的時候心心念念的就是找個舒服躺平的佛心企業，出人頭地啥的完全不在考慮範圍。我確實進了這麼一家公司，同時也幸運的能有給力的同事，工作上又更幸運能夠接觸到許多有競爭力的技術，雖然對於自己的職涯發展還是有點朦朧，但也不至於要絞盡腦汁殺出一條血路那種艱辛，總之事後回想起來真的萬分感謝能夠跌跌撞撞走上Cloud engineer這條路，雖然要學的東西著實不少ＸＤ扯遠了，總之在這麼一個還算良好的環境裡打滾了幾年，漸漸的知道Cloud這個領域水有多深，而自己會的接觸過的有多淺薄，一間公司能給的又多麽有限（並不是說公司不好，畢竟公司有自己的商業目標，也有資源的極限，不可能什麼技術都用一下，動不動就砍掉重練嘗試另一個酷東西），於是萌生了想去看看外面的世界的想法。
再來是薪水，薪水其實在這次的轉職當中扮演了非常重要的角色，畢竟說到底，打工人還是靠薪水生活啊（笑。當時的薪水，說高不高說低也不低，大概是我認知中的平均多一點點的感覺吧。除了廢物社畜一些日常玩樂花銷，每年還能小資的旅行幾趟，以及支撐微奢侈的興趣們例如滑雪及攝影。聽起來很不錯了吧？！是的，我也說了平均之上，然而幾年下來觀察研究公司的薪資結構，也清楚地認知到這或許是我在這間公司的天花板了。這個天花板由於這幾年的基本給調漲以及為了因應合併而新增的各項補助而來的稍晚，然而這些五花八門的安慰劑畢竟有失效的一天，我在發現往後幾年大幅調漲基本給的機會渺茫，而住宅補助又將到盡頭的時候對薪資的焦慮正式爆發。雪上加霜的是公司正在進行働き改革，嚴格控制了大家的加班時數，也直接導致無法在加班費上操作每月收入。眼看今年就要成為往後幾年之中年薪最高的一年時，公司正式發佈了合併的消息。
所有的天時地利人和都湊齊了。決定了，我今年一定要轉職。
載浮載沉 決定了要轉職，下一步就是準備履歷，思考目標，擬定時程了。這次轉職其實在日程上有幾個想實現的願望，首先是希望能避開雪季（笑），再來是希望on board之前能夠有一段時間休息。這是我第一次轉職，其實自己心裡也沒底究竟對公司而言on board前願意給多長時間的休息，當然我知道每間公司每個人的狀況不同，但私心希望能夠是1~2個月。
為什麼這麼在意這個gap呢？想去旅行或是能夠有一段時間回國陪家人當然是其一，不過更重要的是希望能藉著一段完全空白的時間調適好自己的心理狀態吧。在Ｆ社的最後兩年左右開始，莫名其妙地開始很厭倦上班，明明做的事情還算喜歡，職場環境也並不高壓，相反的大家都非常友善好相處，沒什麼利益衝突，但時常還是會情緒莫名的非常低落，完全提不起勁做任何事，只能在火燒眉毛時勉為其難強迫自己去處理那些急迫的事，其餘的事情在情緒上來時是一點也沒辦法去思考。不是很確定是否受到兩年前家裏變故的影響，又或者是長期在家工作顯現出來的副作用，但這個狀況以一個月2~3次，每次1~2天這種頻繁到嚇人的頻率在發作。
我從小到大自認是個很會處理自己情緒的人，但面對這不知從何而來的倦怠，我也只能每次望著窗外，想著不然今天就請半天假出去走走吧！有效嘛？有的，一出去玩心情就好了，但一想到要上班，心情又抑鬱了起來。聽起來很荒唐，我也知道，但我卻只能眼睜睜看自己時好時壞，縱使有再多有休也經不起這樣無謂的消耗。
絞盡腦汁我也沒參透讓我如此憂鬱的真正的元兇，但隱隱覺得換個環境應該會有很大的幫助。唉，其實前面說了這麼多冠冕堂皇的理由，說不定這就是壓垮駱駝的最後一根稻草。
為了讓自己早日從這樣有點病態的心理狀態中解脫，一段不屬於任何公司的，完全空白的時間就顯得對我非常重要了。
也因為這個狀況，我甚至非常認真的思考了是否應該轉換職位，轉換行業，甚至是轉換工作的型態。但思來想去，也想不出個所以然，最後還是決定試著走原來的老路，別白費了過去幾年的經驗，同時爭取多一點時間好好休養生息就好。抱著這樣半吊子的心情，戰戰兢兢的開始了轉職的旅程。
目標 一開始，把聽過的轉職網站都登錄了個遍，在如雪片般飛來的獵頭訊息中挑了幾位面談，也大量閱讀了各種公司的ＪＤ。
這時候對我而言屬於收集資訊的時期，還沒準備真的去面試。那時候想著的是，看ＪＤ和看房子一樣，一回生二回熟，看著看著就會知道什麼樣的機會是適合自己的，雖然前期可能會因為時機未到而錯失一些看似還不錯的選項，但當在對的時間遇上對的機會時，就可以毫不猶豫地把握，講求一個快狠準（我每個時期的房子都是這樣租到的ＸＤ對我自己而言都是毫不妥協的滿分物件）
這個道理放在轉職上，事後回想其實也是某種程度適用，唯一不同的是房子只要在預算內，不太會有「我喜歡但我沒資格租」這種事，但找工作有（苦笑）
幾次面談後，漸漸梳理出了這次轉職的軸心：
工作內容必須和現職有延續性與關聯性 一個原因是為了之後的職涯發展，另一個就是希望能夠藉此拿到senior的pay 年薪漲幅20% ワークライフバランス和福利厚生不比Ｆ社差 能在宅是一大重點，但比起フールリモート更希望是ハイブリッド 彈性上班、年休天數等等 不追求頂尖或認知度高，不侷限業界，但希望是大公司 退一萬步來說至少不能是小型新創（純粹覺得自己的性格不適合） 焦慮 延續現職工作內容毫無疑問是最保險的選擇，同時也是達成年薪漲幅目標的最簡單途徑。不過在和無數獵頭談過，以及閱讀過無數ＪＤ之後，深深覺得自己的不足，心裡知道ＪＤ充其量只是參考指標，很多時候勇敢嘗試以及天時地利人和比較重要，但閱讀著那些自己似懂非懂的要求，心裡非常慌張，連自己都說服不了自己很好，又怎麼能讓別人相信我能夠勝任呢。在一間公司裡待久了，能夠接觸到的東西就那些，真的要樣樣都會，要不自己自發向上搞一些side project來玩，要不就是常常在市場上流動，哪邊有得學去哪邊。至此第一次感受到太過安逸的缺點，真的時不時就會陷入自我懷疑當中。後來也買了各式各樣的書來讀，希望能夠稍微補齊一些缺失的知識，但是隨著轉職如火如荼的展開，效果也是一言難盡（苦笑。
再來是關於薪資漲幅的掙扎，這邊其實並不能單純只討論薪資，還得連面試的title、工作內容、公司狀態種種複雜的面向來討論。總而言之，我的薪資期望是前職＋20%，然而我的年資只有5年，也都待在同一間公司（日商），是一個說senior可能有點勉強的狀態（也是因為我太躺平我承認啦&amp;hellip;&amp;hellip;並不是說一定幾年才能當senior，不過5年確實是一個比較尷尬的分界點），但若找junior的缺薪資可能又無法達標。另一個選項則是挑那些原本薪資水準就高的公司，這樣即使是不那麼資深的位置，薪資可能還是能夠讓我滿意（問題就是這樣的公司大家都想去吧哈哈&amp;hellip;..某種意義上並不比找senior缺容易）。
雖然知道可能不會太簡單，但在諮詢了各式各樣的獵頭與朋友前輩後覺得機率並非渺茫，因此決定還是維持原本的薪資目標，畢竟我自認不是一個喜歡常常跳槽的人，既然久久一次，那必須不能妥協，將難度設定的高一點，勢必要完成一個沒有遺憾的好的轉職。
也因為做了這個決定，當與獵頭面談時，我總是會說我的目標薪資是多少，然後問他有什麼看法，或是問他覺得漲幅多少是合理的。畢竟在整個轉職過程中，獵頭是求職者的夥伴，只有幫求職者找到高薪的好工作，才能雙贏。如果連獵頭都無法贊同我的目標的話，那這艘船還沒出航就已經沉了一半了&amp;hellip;&amp;hellip;
最後選定了兩個獵頭合作，一位是專注於日文的職缺（來自JAC，在bizreach主動聯絡），另一位則是專注於外資企業或是能夠講英文的職缺（來自Hays，在LindkedIn主動聯絡）。事後回想，這真的是一個不錯的決定，體驗了兩種不同風格的support，推薦的職位雖然也有部份重疊，但確實讓我看到了更多的可能性。
面試流水帳與一點反思 面試的細節可能就不寫了，大概有70%是關於上一份工作的內容進行討論，另外30%則是關於自己，包含語言能力、應募的動機、未來的期望、還有一些個人基本資訊。
需不需要準備呢？個人的意見是不那麼需要——不需要像新卒一樣彷彿在準備上台演講（偽裝自己？），因為對於中途來說，面試是雙向的，比起為了拿到offer而去迎合公司，展現真正的自己（包括人格與專業能力）更能確保offer的品質。若我心儀一家公司，而公司也因為我展現出來的形象而選擇了我，那就是最圓滿的結局了。不過一些基本的題目，也應該整理一下思緒，寫下來多練習幾次，看是否有更好更專業的表達方式。力求在真實呈現自己的能力與經歷的同時，能夠很有條理地給面試官留下很專業很有自信的印象。
從開始丟履歷到拿到offer大概是一個半月左右，其實比預計的快，我自己也是嚇一跳，真的是運氣很好。
整體時間軸：
日期 2023/07 取得CKA 2023/10 取得AWS Certified Solutions Architect - Associate certificate 2023/07~2024/01 登錄各種轉職網站、與各種獵頭面談、大量閱讀ＪＤ、訂定目標、準備履歷、整理前職的工作成果 2024年明け~2024/01/19 約兩週時間決定繼續合作的獵頭並與之詳細面談，也開始篩選要投履歷的公司 2024/01/22~2024/02/16 面試。總共應募8社，面試6社，拿到2社內定 2024/02/19-2024/03/22 提離職、交接 2024/03/22 最終出社，開始消化有休 2024/03/31 正式離職日 2024/04/15 入社日 總共應募了8社，其中6社通過書類審查。沒通過的2社有個共通點，都是職缺開放很久，好幾個月都沒撤下來的那種，有一種可能性是這樣的公司其實並不急著要招人補這個缺，而是放長線釣大魚（？，真的出現他們心目中100%完美的人選才要面試，因此書類的通過率極低。</description>
    </item>
    
    <item>
      <title>Kubernetes cluster migration（verelo篇)</title>
      <link>https://ichennn.github.io/blog/2023/12/kubernetes-cluster-migrationverelo%E7%AF%87/</link>
      <pubDate>Tue, 12 Dec 2023 01:04:16 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2023/12/kubernetes-cluster-migrationverelo%E7%AF%87/</guid>
      <description>上篇：
https://ichennn.github.io/blog/2023/11/kubernetes-cluster-migrationkubectl%E7%AF%87/
雖然上一篇使用kubectl移植workload跟pv沒有什麼問題，但就是步驟略多略複雜，又是全部手動操作，移植的對象一多，難免曠日廢時忙中有錯ＸＤ
恩～有沒有更好更快的方法呢？
突然靈光一閃，之前我不是抱著嚐鮮的心態安裝了velero在cluster裡嗎！一直以來沒什麼實際應用的機會略感可惜，這不，天上掉下來一個大好的機會，正好可以試試看velero好不好用。
安裝velero 其實安裝沒碰到太多的困難，只要準備好存放備份的object storage，接下來照著公式上的步驟deploy到cluster上就行了。
https://velero.io/docs/v1.12/
velero雖然看似單純的一個小工具，其實用途很多，像是disaster recovery、cluster migration、或是日常的測試時用來回復備份等等，沒有不會怎樣，但有了之後突然感覺很方便的概念。
由於不是本篇的重點，公式網站的文章也有非常詳細的說明，因此就不贅述了。
使用velero來備份 # velero backup create --from-schedule stg-k8s-backup INFO[0000] No Schedule.template.metadata.labels set - using Schedule.labels for backup object backup=velero/stg-k8s-backup-20230210160910 labels=&amp;#34;map[]&amp;#34; Creating backup from schedule, all other filters are ignored. Backup request &amp;#34;stg-k8s-backup-20230210160910&amp;#34; submitted successfully. Run `velero backup describe stg-k8s-backup-20230210160910` or `velero backup logs stg-k8s-backup-20230210160910` for more details. # velero backup get | grep stg-jpe12-k8s-backup-20230210 stg-k8s-backup-20230210160910 Completed★ 0 1 2023-02-10 16:09:11 +0900 JST 6d default &amp;lt;none&amp;gt; [舊cluster]將deployment replica=0 這邊和上一篇是一樣的，主要是想要保險一點，在replica=0的狀態下移植到新的環境，避免ip衝突，或是其他有可能的紕漏。</description>
    </item>
    
    <item>
      <title>Kubernetes cluster migration（kubectl篇）</title>
      <link>https://ichennn.github.io/blog/2023/11/kubernetes-cluster-migrationkubectl%E7%AF%87/</link>
      <pubDate>Mon, 06 Nov 2023 23:04:22 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2023/11/kubernetes-cluster-migrationkubectl%E7%AF%87/</guid>
      <description>因為EOL的緣故要更新k8s的vm OS，順便將已經很久沒有更新的weave-net換成calico，因此決定重新建一個cluster，再把原本的workload轉移到新的cluster上。
乍聽之下沒什麼問題，畢竟原本就是用manifest管理的，平時更新workload也都是重新將manifest deploy一遍就行。
但真正的問題在於，其中一些workload，像是jenkins，是將app的資料儲存在pv裡，若要轉移到新的cluster上，也要連帶著將pv裡的資料也轉移過去才行。
因此如何轉移pv變成了這次migration最大的課題。
首先梳理一下cluster的狀況：
以jenkins為例： deployment -&amp;gt; (經由nfs provisioner創建) pvc -&amp;gt; pv -&amp;gt; nfs https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner 作為storage的nfs沒有改變 也就是說在nfs上舊cluster用來儲存資料的path不會移動或改變，只是怎麼讓新cluster使用這個路徑作為pv的問題 移植pv與pvc的方法是參考這篇文章實作的：
https://acv.engineering/posts/migrating-a-kubernetes-pvc/
[新cluster] Deploy NFS provisioner 什麼是NFS provisioner呢？這是一個由kubernetes-sigs提供的工具，全稱是Kubernetes NFS Subdir External Provisioner。
可以非常方便的使用既有的NFS server作為pv的儲存路徑，而pv名稱會以${namespace}-${pvcName}-${pvName}的格式呈現。
由於舊cluster上的pv都是透過nfs provisioner去創建的，因此在轉移之前，必須先在新的cluster上也deploy NFS provisioner。
# kubectl apply -k jenkins-nfs-provisioner/test/ storageclass.storage.k8s.io/jenkins-nas-nfs created serviceaccount/jenkins-nfs-client-provisioner created role.rbac.authorization.k8s.io/jenkins-leader-locking-nfs-client-provisioner created clusterrole.rbac.authorization.k8s.io/jenkins-nfs-client-provisioner-runner created rolebinding.rbac.authorization.k8s.io/jenkins-leader-locking-nfs-client-provisioner created clusterrolebinding.rbac.authorization.k8s.io/jenkins-nfs-client-provisioner created deployment.apps/jenkins-nfs-client-provisioner created # kubectl get all | grep nfs pod/jenkins-nfs-client-provisioner-69978cf7f4-vzs2g 1/1 Running 0 118s deployment.apps/jenkins-nfs-client-provisioner 1/1 1 1 118s replicaset.</description>
    </item>
    
    <item>
      <title>CKA備考＆常用指令筆記</title>
      <link>https://ichennn.github.io/blog/2023/08/cka%E5%82%99%E8%80%83%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E7%AD%86%E8%A8%98/</link>
      <pubDate>Sat, 12 Aug 2023 17:29:03 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2023/08/cka%E5%82%99%E8%80%83%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E7%AD%86%E8%A8%98/</guid>
      <description>最初因為工作需要而開始接觸Kubernetes，組內的前輩們花了一段時間建立了一個cluster，有好幾個worker node，上面也已經deployed了各種app。
身為一個剛被配屬的小菜鳥，也從來沒有接觸過k8s，前輩們於是決定幫我開一個ナレッジ共有会，從pod的基本概念講起，淘淘不絕分享了兩小時（其實仔細想想，線上課都要20幾小時，兩小時要是我就聽懂了也是滿神的），但是只換來我呆滯的眼神跟停止思考的腦袋&amp;hellip;&amp;hellip;
總而言之，就是一知半解，但工作還是要做，日子還是要過。我就這樣半推半就（？）進入了kubernetes的世界，竟也跌跌撞撞但有驚無險的摸懂了基本操作，甚至還主導了幾次cluster upgrade跟cluster migration。幾句話的輕描淡寫，背後也是花了好幾年的時間，期間一直在想，我應該要找個線上課老老實實地從頭開始打基本功，能順便考個CKA就好了。
但行動力像條蟲的我，拖延病一發作就是一兩年，直到今年，各種層面上想要好好整頓一下自己的生活，也包括未來的職涯。也因此好好把CKA拿到手，就又回到我的待辦事項中，趁著4月新生活打折的時機，以30%off的價格買了CKA考試。
線上課程 跟網路上大部分人一樣，都是找了udemy上Mumshad Mannambeth的Certified Kubernetes Adminidtrator(CKA) with Practice Tests來看。
不得不說，真的清楚易懂，而且每個小單元都有練習題，最後還有三個模擬試題可以練習，雖然環境和真正考試環境並不是100%相同，但也相去不遠了。課程影片和hands on lab雖然是相輔相成的，但畢竟考試的形式不是選擇題，而是上機實際操作，hands on lab其實才是決定能不能順利通過考試的關鍵！！
說實在，若有無限的時間慢慢google的話其實都不是難事（畢竟是開書考ＸＤ），但難就難在必須在有限的時間內（2小時）完成17道題目，而且要敲的指令也不算少，做完題目也得檢查一下比較保險，因此把簡單的指令記下來，並知道要怎麼在doc中搜尋出複雜的指令就成了考試對策中一個重要的環節。（大概就跟考多益一樣，到最後也不見得是在考英文能力，而是耐心跟讀題速度ＸＤ）
kubectl常用指令 雖然說是為了考試而寫的筆記，但在自己過去的實務經驗上，好用實用的指令還是很多的，準備CKA也不只是為了那張證書，在自己的技術提升上也是受益良多了。
參考Document url CKA開書考可參考範圍 https://kubernetes.io/docs/home/ k8s cheat sheet https://kubernetes.io/docs/reference/kubectl/cheatsheet/ 指令 kubectl help https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands 前置設定 生成yaml
export do=&amp;#34;--dry-run=client -o yaml&amp;#34; create各種 Pod
雖然被歸類在create，但生成pod是唯一不能使用kubectl create的
kubectl run &amp;lt;pod-name&amp;gt; 生成1個以上container的pod
先create一個container，再手動修改yaml Deployment, Daemonset
Deployment
kubectl create deployment &amp;lt;name&amp;gt; --image=xxx --replicas=3 (-r 3) Daemonset
先create deployment，再手動將Kind: Deployment改成Kind: Daemonset Secret
docker-registry
kubectl create secret docker-registry xxx --docker-server=xxx:5000 --docker-username=user --docker-password=pass generic</description>
    </item>
    
    <item>
      <title>讓Hyde-x theme重新動起來</title>
      <link>https://ichennn.github.io/blog/2023/04/%E8%AE%93hyde-x-theme%E9%87%8D%E6%96%B0%E5%8B%95%E8%B5%B7%E4%BE%86/</link>
      <pubDate>Fri, 07 Apr 2023 09:03:08 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2023/04/%E8%AE%93hyde-x-theme%E9%87%8D%E6%96%B0%E5%8B%95%E8%B5%B7%E4%BE%86/</guid>
      <description>距離上一次更新文章，不知不覺已經過了四年。最近想要重新振作起來，整理自己的生活，一方面希望能繼續保持生活中有所output的習慣，另一方面也是希望能有條理地回顧自己過去四年當中究竟有哪些成長與改變。
然而，就在我興致勃勃地將hugo重新載了回來之後（是的，這四年當中經歷了太多，連電腦都換了，當然也沒記得要裝hugo），發現我使用的Hyde-x模板竟然&amp;hellip;&amp;hellip;已經壞了（哭
原本也想過要不要乾脆換個模板，或是沿用Hyde，但是換成其他的fork版本。畢竟Hyde-X自從2018年起就沒有再更新維護了，以後應該只會越壞越多吧ＱＱ
不過最後峰迴路轉，實在是懶得再去調整CSS，也覺得Hyde-x有一些我滿喜歡的功能（像是label），最後決定還是自己來修吧！
其實仔細看render error，只需要修改幾個小地方，並沒有想像中的整組壞光光ＸＤ因此做個紀錄，也為之後重新寫文章做個熱身＝）
layouts/partials/sidebar.html 這裡的寫法是從另一個Hyde repo直接借過來用的
https://github.com/spf13/hyde/blob/master/layouts/partials/sidebar.html
- &amp;lt;p&amp;gt;&amp;lt;font size=2&amp;gt;Copyright &amp;amp;copy; {{ .Now.Format &amp;#34;2006&amp;#34; }} &amp;lt;a href=&amp;#34;{{ &amp;#34;/LICENSE&amp;#34; | absURL }}&amp;#34;&amp;gt;License&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt; + &amp;lt;p&amp;gt;&amp;lt;font size=2&amp;gt;{{ with .Site.Params.copyright }}{{.}}{{ else }}&amp;amp;copy; {{ now.Format &amp;#34;2006&amp;#34;}}. All rights reserved. {{end}}&amp;lt;br/&amp;gt; Note： 這一行後來在Hyde-x中被移動到layouts/partials/sidebar/footer.html中了。我也忘了當初是出於什麼理由，一直將他留在我的override的sidebar.html中
layouts/index.html 這裡是Home page裡呈現出來的全部文章列表。
原本的寫法已經deprecated，在Hyde-x的issue中也有提到。
https://github.com/zyro/hyde-x/issues/84
- {{ $paginator := .Paginate (where .Data.Pages &amp;#34;Type&amp;#34; &amp;#34;post&amp;#34;) }} + {{ $paginator := .Paginate (where .Site.RegularPages &amp;#34;Type&amp;#34; &amp;#34;post&amp;#34;) }} layouts/partials/head.html 這裡是另一個已經deprecated的寫法，在Hugo的論壇裡也有相關的討論。
https://discourse.gohugo.io/t/rsslink-cant-evaluate-field-rsslink-in-type-hugolib-pagestate-after-version-upgrade-0-91-2-v0-94-0-extended-linux-amd64/37617
修正如下：</description>
    </item>
    
    <item>
      <title>只想速戰速決der就活雜感</title>
      <link>https://ichennn.github.io/blog/2019/04/%E5%8F%AA%E6%83%B3%E9%80%9F%E6%88%B0%E9%80%9F%E6%B1%BAder%E5%B0%B1%E6%B4%BB%E9%9B%9C%E6%84%9F/</link>
      <pubDate>Mon, 22 Apr 2019 22:04:33 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2019/04/%E5%8F%AA%E6%83%B3%E9%80%9F%E6%88%B0%E9%80%9F%E6%B1%BAder%E5%B0%B1%E6%B4%BB%E9%9B%9C%E6%84%9F/</guid>
      <description>將近一年沒有更新了，不知不覺來到日本已經邁入第三年了，今年四月也順利成為社畜的一員（然後日文還是哩哩落落ＱＱ）。
這篇主要是想記錄一下就活的過程，距離找到工作結束就活已經好～長一段時間了，只能憑記憶寫個大概惹（就活中太厭世根本沒心情記，就活脫出後太愉快就忙著耍廢了（欸
基本資料 112
京大情報學研究科（19卒）
N1（約2012年考的，低空飛過ＸＤ）
TOEIC金色
大學時沒交換，畢業後沒念語言學校或別科
時間軸 因為知道就活就是一場體力戰跟心理戰，先崩潰的人就輸了，所以當初就決定要速戰速決。說實在到四月初開學的時候，已經有點焦慮了，想著再下去可能就要病急亂投醫，還好這時候就拿到想要的內定了ＸＤ
2017.08　夏インターンシップ
2018.01　就活開始（企業研究、投ES）
2018.02-03　冬インターンシップ
2018.02-04　投ES、各種面試～
2018.04　拿到內定 結束就活
整體狀況 目標業界＆職種：IT エンジニア
応募数：11
面接辞退：2
内定：4
就活過程與所思所想 過程實在不是三言兩語可以總結的東西，所以就想到什麼寫什麼了（欸
實用就活網站 リクナビ、マイナビ：公司數量多，範圍大，応募方便。缺點是有點像海底撈針，然後會用海量的廣告信轟炸你囧
Wantedly ：大部分是ベンチャー企業，有點像部落格，有心的公司會po一些讓求職者更了解他們的文章（公司內部的活動、參加的技術集會、產品介紹、員工訪談之類）
サポーターズ：專門針對エンジニア職的網站，幾乎都是ITベンチャー（偶爾也會有規模比較大的公司）。辦很多說明會，選考會，參加的話可以拿到現金補助（這一點很推！！）
就活会議：登錄就可以看到公司評價、歷年ES，和別人回報的面試狀況（面試官幾個人？氣氛如何？問什麼？多久拿到結果之類的）
Vorker：評價網站。資訊量大，公司齊全，決定要投之前都應該來查一查
以上幾個是我在就活中比較常用的，其他還有One career（外資企業多）、針對留學生的（global leader、job博等等）、offer box（逆求人）&amp;hellip;&amp;hellip;等。不過我個人覺得留學生不是一塊好招牌，所以也沒怎麼用過。
主軸與目標 首先想先說一下我的就活主軸跟對工作的期望，畢竟公司跟化妝品一樣，我的蜜糖可能是你的毒藥ＸＤ所謂好的就活，其實就是找到一家你喜歡而且合適的公司罷了，薪水、知名度、地點這些客觀項目在每個人心中的排序我相信都是不一樣的。
首先，我希望公司有自己的產品或服務，雖然ptt上大家都說日本IT很廢，但我相信有自己的產品在開發維護的公司能夠學到的東西還是多一些。再來，我是個很注重生活平衡的人，加班不要太誇張對我來說還滿重要的，甚至願意犧牲一些薪水來換。然後&amp;hellip;沒了ＸＤ
基本上有興趣的公司如果有辦インターン（即使只有一天）或是交流活動（說明會以外的）我都會盡量參加，畢竟只有這種場合才能真正感受到這家公司的氛圍，也才有機會跟員工聊聊（可以趁機問薪水跟加班之類的ＸＤ）
因為個人喜好，我的目標一開始就放在規模不大的公司。大約300~1000左右人的公司，不侷限在ベンチャー，但大部分還是比較年輕的公司。
エントリーシート 剛開始要寫エントリーシート的時候，就是呈現一個坐在電腦前，然後兩小時過後只寫了兩行（還很爛）的慘況。不只因為日文不好，內容跟結構也不知道怎麼下手，一開始硬擠出的幾篇有拿給日本人改，結果當然是被砍掉重練（哭
後來決定使出練英文作文的絕招——模仿別人，然後去頭去尾改關鍵字（？
ES其實問來問去就是那幾題，首先要讀過大量的ES，觀察日本人怎麼組織段落，把可能有用的句子字詞記下來。接著把自己想表達的東西在腦中稍微組織一下，一邊參考筆記一邊寫，就會突然跟開竅了一樣，下筆有如神（好啦，沒那麼誇張
上面講的可能有點籠統，什麼叫「可能有用的句子」呢？舉幾個當初有抄下來的當成例子：
「〜ビジョンに感銘を受けたことです。」
「〜であれば、〜事ができるだけではなく、仕事としてのやりがいを感じる事ができます。」
「他企業より徹底した〜の実行を目指していらっしゃる貴社の〜に惹かれ、志望しました。」
類似模板，只要填入關鍵字，就可以搖身一變成為自己的東西。當然這是我自己覺得好用的方法，不一定適用每個人～
面試 說實話，我其實沒怎麼準備面試（爆 對這種真的很苦手啊～
總結幾個小要點（？：
入退室禮儀：事先先練習一下整個面試的流程，從敲門到最後出去關門為止。面試內容不是自己可以控制的，但至少這些細節盡力做到不失禮。若要說面試官會不會因為你應對得宜而加分，我覺得不會ＸＤ畢竟做得到的人很多。但若是冒冒失失，表現得太超乎常理（？）（太惹人注目），搞不好會被扣分～只能說不用做到100分，但至少不能0分啊 講話內容要有主軸：這好像應該放在上一節講ＸＤ基本上エントリーシート越無瑕，面試越輕鬆～主軸這種東西因人而異，但至少讓面試官覺得你是個有思想的人，不是隨波逐流不知道自己到底在追求什麼的人就行。 記得要笑，然後不要說謊：好像廢話，哈哈哈 .
.
＿＿＿
好的，這是一篇虎頭蛇尾的紀錄（反省
之後有機會的話再寫寫社畜生活的紀錄好了～
（雖然每天回家都只想耍廢，其他事情どうでもいい（欸</description>
    </item>
    
    <item>
      <title>用google cloud platform 開jupyter notebook!</title>
      <link>https://ichennn.github.io/blog/2018/01/%E7%94%A8google-cloud-platform-%E9%96%8Bjupyter-notebook/</link>
      <pubDate>Mon, 29 Jan 2018 14:49:08 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2018/01/%E7%94%A8google-cloud-platform-%E9%96%8Bjupyter-notebook/</guid>
      <description>參照這篇，做個紀錄以免我以後又忘了（真的很金魚腦 該怎麼辦
https://towardsdatascience.com/running-jupyter-notebook-in-google-cloud-platform-in-15-min-61e16da34d52
創建google cloud platform 帳號 直接用自己的google帳號就可以惹，一年有300美試用額度，對一般人而言真的是綽綽有餘了
建立vm instance : compute&amp;gt; compute engine
安裝google cloud sdk: 可以使用本地terminal利用SSH連線登入google cloud platform的server，不一定要使用，也可以直接網頁上點一下SSH開啟console
不過用gcloud指令的話傳檔案比較快ＸＤ
解壓縮之後，執行install.sh
我自己就莫名其妙一直有奇怪的錯誤訊息（不過好像還是有安裝成功&amp;hellip;吧），接著要認證帳戶
輸入gcloud auth login ，瀏覽器會自動跳出google帳號的頁面讓你點選登入的帳號
接下來就可以使用gcloud了
到google cloud platform的vm那邊，點選SSH連線旁邊小三角形後再選查看gcloud指令
會出現類似gcloud compute --project &amp;quot;&amp;lt;project-id&amp;gt;&amp;quot; ssh --zone &amp;quot;&amp;lt;your-zone&amp;gt;&amp;quot; &amp;quot;&amp;lt;instance-name&amp;gt;&amp;quot; 的指令，在terminal輸入後就可以用SSH連線到google cloud platform
安裝anaconda3 wget http://repo.continuum.io/archive/Anaconda3-4.3.0-Linux-x86_64.sh bash Anaconda3-4.0.0-Linux-x86_64.sh source ~/.bashrc 設定網路 Network &amp;gt; VPC network
External IP address :先將網路改成static
Firewall rule: 建立一個新的rule允許port tcp:5000 (or 任何一個想要指定開啟notebook 的port)
設定jupyter notebok jupyter notebook --generate-config 建立config檔（若沒有的話）</description>
    </item>
    
    <item>
      <title>[打工見聞] 當夢想成為現實——藥妝店打工面試篇</title>
      <link>https://ichennn.github.io/blog/2017/08/%E6%89%93%E5%B7%A5%E8%A6%8B%E8%81%9E-%E7%95%B6%E5%A4%A2%E6%83%B3%E6%88%90%E7%82%BA%E7%8F%BE%E5%AF%A6%E8%97%A5%E5%A6%9D%E5%BA%97%E6%89%93%E5%B7%A5%E9%9D%A2%E8%A9%A6%E7%AF%87/</link>
      <pubDate>Thu, 17 Aug 2017 16:45:16 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/08/%E6%89%93%E5%B7%A5%E8%A6%8B%E8%81%9E-%E7%95%B6%E5%A4%A2%E6%83%B3%E6%88%90%E7%82%BA%E7%8F%BE%E5%AF%A6%E8%97%A5%E5%A6%9D%E5%BA%97%E6%89%93%E5%B7%A5%E9%9D%A2%E8%A9%A6%E7%AF%87/</guid>
      <description>風風火火的度過了在日本的第一個學期後，心底又冒出了想在日本打工的念頭。
之前雖然一直在考慮，不過礙於學校實在太忙，自己又不是效率極高的人，怕蠟燭兩頭燒最後會搞到火燒厝自己還陪葬ry
為什麼要去打工呢 嘛，首先比較單純的原因就是想賺點生活費。
日本很多東西其實不貴，當然「不貴」是以日本的薪資水平來看。日本打工時薪大約落在850~1200這個範圍內，假設以¥1000為例：
一份麥當勞套餐¥500 (工作0.5 hr) 平價吃到飽燒肉或家庭餐廳 ¥3000左右 （工作3 hr） 超市肉片看部位、品質，差不多在¥200~¥500 (太高級的我就不買了，反正我也吃不出來（欸) （工作0.2~0.5 hr） 1000ml的牛奶（牛乳，非乳飲料）¥200左右 （工作0.2 hr） 逛街會看到的漂亮耳環 ¥800~¥2000 （工作0.8~2 hr） 折扣季的專櫃衣服 ¥2000~¥3000 （工作2~3 hr） 稍微跟台幣的狀況對比一下，就知道日本雖然物價高，可是如果不是堅持一定要過最高品質的生活，只是偶爾逛逛街、買美妝、部分自炊的話，賺日幣花日幣簡直輕鬆無負擔（當然有多輕鬆還是看物欲而定啦ＸＤ）
再來，另一個原因就是想要體驗日本打工ＸＤ不只是把自己關在學校的保護網內（尤其自己是外國人，學校跟外面的社會其實會有很大的差異感），而是把自己丟到另一個環境中，強迫自己有不一樣的體驗、不一樣的挑戰。
常常看到很多人打工度假的心得文，就覺得如果別人能有這種勇氣，一直在害怕自己日文不好、害怕適應新環境新事物的自己，如果不能跨過這道心魔，那豈不是太令自己失望了嗎。
成為藥妝店店員 會選擇藥妝店作為第一個目標，一方面是自己身為觀光客的時候，藥妝店簡直就是日本的一個夢幻聖地，一大票人興沖沖的擠到店裡，風風火火的掃光各種美妝藥品，然後心滿意足地提著好幾袋免稅商品出去。這簡直就是一個可以合理滿足自己的購物慾又鮮少會有罪惡感的奇妙地方。實在很想知道身為其中的一份子到底是什麼感覺。
另一方面&amp;hellip;還是老話一句，薪水很高啊。同樣是在工作，領著比較高的時薪總是比較心滿意足，除了更能鞭策自己好好工作外，對各種上班鳥事的忍耐力也會突然成長兩倍ＸＤ
面試前的準備 通常這種店都是大量招募的，因此有自己的網站可以直接去填資料、預約面試。
面試前煩惱了很久到底該穿什麼，因為只是打工，應該是不必到就活套裝那種程度的正裝，可是穿著平常的便服又覺得有點太輕便了（？（平常超愛寬褲的ＸＤ）
後來還是選了安全的黑白色系，白色休閒襯衫＋黑長褲＋亮面包鞋（亮面應該是比霧面更不正式，有種玩耍感ＸＤ不過因為剛好看到喜歡的，所以也不管那麼多了啦）
面試當天 不得不說，簡直就是神展開，完全沒想到會發生這種事ＸＤ
當天因為太害怕遲到，就早到了20分鐘 囧。想說外面這麼熱這麼乾等著也不是辦法，就走進去說我是來面試的，然後就被帶到研修中心裡（其實就是個倉庫一般的空間www）
先填了基本資料表，還有一些跟排班有關的調查。填到一半的時候外面突然走進來另外四個來面試的人（？？！！）欸，所以他們是一起被放進來的&amp;hellip;&amp;hellip;
然後其他面試者開始填資料的時候，我已經寫完了。負責的人看著看著就開始跟我聊天（到底是聊天還是面試我也不知道ＸＤ），聊一些什麼時候來日本的啊？怎麼學日文的啊？以前在台灣有打工哦？畢業後要幹嘛啊？之類的閒話家常
結果問到一半，負責人突然說：「欸，我不小心開始面試了耶，該怎麼辦」
？？？！！！原來現在在面試嗎！！！？囧
然後我就結束了（咦
接下來半小時就像個旁觀者一樣看著其他人被面試ＸＤＤＤＤＤ結束之後被負責人留下來，說我勤務希望店沒有填，然後我很認真的想了一下，告訴他我其實不知道其他店店名是啥&amp;hellip;..(太兩光了啊小姐
結果！！負責人看了看門口（確認其他人走了），說道：「其實呢，你應該就是合格了，所以我們來約下一次研修的時間吧。」
咦？&amp;hellip;&amp;hellip;咦！！！！！！
這過程太如夢似幻了，自己講一講都醉了ＸＤ總之呢，我找到工作啦～ 💕</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 部署到Heroku囉！</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E9%83%A8%E7%BD%B2%E5%88%B0heroku%E5%9B%89/</link>
      <pubDate>Sat, 22 Jul 2017 17:54:54 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E9%83%A8%E7%BD%B2%E5%88%B0heroku%E5%9B%89/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何解決上傳到Heroku時可能碰到的一些亂七八糟的小毛病。以及如何在Heroku上實現使用者上傳圖片的功能。
##第一次部署到Heroku
首先，安裝Heroku的 gem。再來，註冊一個Heroku帳號。
接下來照著這篇：https://www.railstutorial.org/book/beginning 的1.5章將Rails的設定都弄好就行了！
網路上有一些聲音認為Heroku實在是太囉唆麻煩，一大堆設定，搞不好又會上傳失敗，作為一個server實在是讓人惱火。
嘛，確實ＸＤ不過以一個新手的觀點來說，因為是免費的（當然，需要更大的空間的話就要付費的），而且玩過Heroku的人多，就算碰到什麼問題也總是能估狗到答案的，就這兩點來說還是滿不錯的啦。
heroku update 在一般情況下，要將專案push到Heroku上，是這樣下指令的：
git push heroku master
但在進行Rails專案時，可能會開好幾個branch，假設今天要把branch h03 push到heroku 上面的話也很簡單，只要：
git push heroku h03:master
然後 heroku run rake db:migrate
就可以用 heroku open 打開熱騰騰的網站了！
另外，經過實測，有幾點問題值得紀錄：
heroku上無法顯示flashes (解決方式未知，因為覺得flash很醜，乾脆就不用了ＸＤ) 在app/assets/stylesheets/application.scss 當中加入 @import &amp;#34;bootstrap-sprockets&amp;#34;; @import &amp;#34;bootstrap&amp;#34;; 會使heroku無法push (原因未知)
這兩點因為沒什麼必須性，因此為了省麻煩我就都直接刪掉了ＸＤ
解決在heroku上圖片無法顯示的問題 好不容易上傳成功，結果一打開——哇，所有的圖片都不見惹～～～的這種惱火感真的很讓人難忘啊&amp;hellip;
不過解決方法也不複雜，把設定改一下就行了。只要到Config/environments/production.rb 當中，將
config.serve_static_files = ENV[&amp;#39;RAILS_SERVE_STATIC_FILES&amp;#39;].present? 改成
config.serve_static_assets = true 上傳圖片＋Heroku 好的，終於辛辛苦苦把上傳圖片的功能做好了，想要傳到heroku上面自己看著爽一下，殊不知&amp;hellip;&amp;hellip;
heroku不能儲存使用者自己上傳的圖片啊！！！！
（抱頭痛哭
好的，哭完了還是要來想想辦法
1.AWS S3
先說結論，利用AWS S3儲存圖片就可以解決這個問題了
步驟參照這篇：http://blog.qinfeng.io/posts/1383092</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] Carrierwave實作圖片上傳功能</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-carrierwave%E5%AF%A6%E4%BD%9C%E5%9C%96%E7%89%87%E4%B8%8A%E5%82%B3%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sat, 22 Jul 2017 17:54:35 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-carrierwave%E5%AF%A6%E4%BD%9C%E5%9C%96%E7%89%87%E4%B8%8A%E5%82%B3%E5%8A%9F%E8%83%BD/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何用Carrierwave這個gem實作圖片上傳功能。
上傳圖片功能 首先要安裝carrierwave 跟rmagick 這兩個gem
Gemfile :
gem &amp;#39;carrierwave&amp;#39; gem &amp;#39;rmagick&amp;#39; 小插曲 在安裝rmagick之前，要先用homebrew 安裝imagemagick
$ brew install imagemagick 然後安裝rmagick 的時候，可能會出現這樣的錯誤訊息：
Building native extensions. This could take a while... ERROR: Error installing rmagick-2.16.0.gem: ERROR: Failed to build gem native extension. /Users/Hung/.tokaido/Rubies/2.2.2-p95/bin/ruby -r ./siteconf20170629-2407-7s934e.rb extconf.rb checking for clang... yes checking for Magick-config... no checking for pkg-config... no Can&amp;#39;t install RMagick 2.16.0. Can&amp;#39;t find Magick-config or pkg-config in /Users/Hung/.</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 實作簡易的搜尋和最新消息功能</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%AF%A6%E4%BD%9C%E7%B0%A1%E6%98%93%E7%9A%84%E6%90%9C%E5%B0%8B%E5%92%8C%E6%9C%80%E6%96%B0%E6%B6%88%E6%81%AF%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sat, 22 Jul 2017 17:40:26 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%AF%A6%E4%BD%9C%E7%B0%A1%E6%98%93%E7%9A%84%E6%90%9C%E5%B0%8B%E5%92%8C%E6%9C%80%E6%96%B0%E6%B6%88%E6%81%AF%E5%8A%9F%E8%83%BD/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何實作最新消息功能和簡易的搜尋功能，不使用任何gem。當然，有很多現成的gem可以達到非常強大的搜尋功能，若有需要也想找機會試試（可是功能越強大說明通常也就越難懂ＸＤ（哭）。
簡易搜尋功能 以搜尋書本為例：
想達到的功能是在書本列表當中可以搜尋想要的書（title和description都可以對應）
首先，找到想放置搜尋bar的頁面：app/views/groups/index.html.erb
加入下面這一段code，做一個陽春的搜尋框
&amp;lt;div&amp;gt; &amp;lt;%= form_tag groups_path, id: &amp;#34;search-form&amp;#34;, :method =&amp;gt; &amp;#34;get&amp;#34; do %&amp;gt; &amp;lt;%= text_field_tag :search, params[:search], class: &amp;#39;btn btn-default&amp;#39;, placeholder: &amp;#34;Search Books&amp;#34; %&amp;gt; &amp;lt;%= submit_tag &amp;#34;Search&amp;#34;, class: &amp;#39;btn btn-default&amp;#39;, name: nil %&amp;gt; &amp;lt;% end %&amp;gt; &amp;lt;/div&amp;gt; 再來找到controller：app/controllers/groups_controller.rb
更改index的部分，這樣才會顯示搜尋結果。記得paginate的部分也要寫，不然搜尋結果的頁面會報錯
def index if params[:search] @groups = Group.search(params[:search]).recent.paginate(:page =&amp;gt; params[:page], :per_page =&amp;gt; 10) else @groups = Group.all.recent.paginate(:page =&amp;gt; params[:page], :per_page =&amp;gt; 10) end end 最後是model的部分：app/models/group.</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 好用的will_paginate及simpl_ form_for</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%A5%BD%E7%94%A8%E7%9A%84will_paginate%E5%8F%8Asimpl_-form_for/</link>
      <pubDate>Sat, 22 Jul 2017 17:10:16 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%A5%BD%E7%94%A8%E7%9A%84will_paginate%E5%8F%8Asimpl_-form_for/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何使用will paginate 及 simple form for這兩個方便又好用的gem來使網站變得更美觀。
use simple_form_for Simple_form_for 是一個好用的gem，可以自動調整格式
如果還沒安裝的話，記得先在gemfile裡面新增gem &amp;quot;simple_form&amp;quot; ，然後 bundle install
下一步：
rails generate simple_form:install --bootstrap 執行boostrap的設定
就可以使用simple_form_for了！
使用方法也很簡單，只要將原本是form_for 的部分都替換成simple_form_for 並照著規定的格式更改內容就行了。
&amp;lt;%= simple_form_for @group do |f| %&amp;gt; &amp;lt;%= f.input :description, input_html: { class: &amp;#34;form-horizontal&amp;#34;, :rows =&amp;gt; 4} %&amp;gt; &amp;lt;% end %&amp;gt; :rows 可以用來調輸入框的高度
這是使用simple_form_for的效果：
Simple_form_for會自動偵測不可空白的欄位，並給出警告：
Reference : use form_for
&amp;lt;%= form_for @group do |f| %&amp;gt; &amp;lt;%= f.label &amp;#34;description&amp;#34;, :class =&amp;gt; &amp;#34;string optional control-label&amp;#34; %&amp;gt; &amp;lt;%= f.</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 文章刪除修改實作、修改時區和換行</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E6%96%87%E7%AB%A0%E5%88%AA%E9%99%A4%E4%BF%AE%E6%94%B9%E5%AF%A6%E4%BD%9C%E4%BF%AE%E6%94%B9%E6%99%82%E5%8D%80%E5%92%8C%E6%8F%9B%E8%A1%8C/</link>
      <pubDate>Sat, 22 Jul 2017 16:52:00 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E6%96%87%E7%AB%A0%E5%88%AA%E9%99%A4%E4%BF%AE%E6%94%B9%E5%AF%A6%E4%BD%9C%E4%BF%AE%E6%94%B9%E6%99%82%E5%8D%80%E5%92%8C%E6%8F%9B%E8%A1%8C/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何實作Rails 101教程當中沒有提供答案的文章修改刪除功能。
文章刪除修改實作 在app/controllers/posts_controller.rb 下定義edit method
def edit @group = Group.find(params[:group_id]) @post = Post.find(params[:id]) end 要記得@group 跟 @post 都要定義！不然會出現 NoMethodError
無論是Edit, update, destroy都需要
另外，edit介面也要同時加上@group跟@post，用array 方式表示，系統才能判斷是哪一個group裡面的哪一個post
&amp;lt;%= simple_form_for [@group, @post] do |f| %&amp;gt; ..... Simple_format ＆日期顯示 換行用，只要將要換行的內容放入simple_format() 當中就可以了
&amp;lt;% @posts.each do |post| %&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;%= simple_format(post.content) %&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;%= post.user.email %&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;%= post.created_at.to_date %&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;% end %&amp;gt; 關於日期的顯示方式，若是只使用最簡單的post.created_at 會以這樣的方式呈現：
若想要讓樣式看起來簡潔一些，可以加上created_at.to_date （或是 created_at.strftime(&amp;quot;%Y-%m-%d&amp;quot;) ）就會只顯示到日期，不會出現後面的UTC之類的
時區更改 想要改到自己地區的時區，到config/application.rb 改設定：</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 基本View構成——HTML&amp;CSS</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%9F%BA%E6%9C%ACview%E6%A7%8B%E6%88%90htmlcss/</link>
      <pubDate>Sat, 22 Jul 2017 15:43:37 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%9F%BA%E6%9C%ACview%E6%A7%8B%E6%88%90htmlcss/</guid>
      <description>這是第一次用Ruby on Rails 做出一個完整的網站。
已經架在Heroku上了： https://gentle-inlet-97986.herokuapp.com/
可能跑的有點慢，畢竟整個專案很肥ＸＤ
這次的主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄一些和View構成有關的部分。
HTML partial 顧名思義，就是把一份html檔拆成好多部分來組合
基本上，一個頁面可以拆成三個部分：navbar, footer, 中間的內容。這麼拆的好處是，可以將上下兩條bar設定成全域樣式，中間的內容無論怎麼跳轉，都不會影響到上下方的bar
網站上頭的bar：View/common/_navbar.html.erb
&amp;lt;!-- Navigation --&amp;gt; &amp;lt;nav class=&amp;#34;navbar navbar-default navbar-fixed-top topnav&amp;#34; role=&amp;#34;navigation&amp;#34;&amp;gt; .... &amp;lt;/nav&amp;gt; 網站下方的footer：View/commom/_footer.html.erb
&amp;lt;!-- Footer --&amp;gt; &amp;lt;footer&amp;gt; ... &amp;lt;/footer&amp;gt; 然後修改
View/layouts/application.html.erb
(html全域樣式，不管頁面怎麼跳轉都會在)
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Book Reviews&amp;lt;/title&amp;gt; &amp;lt;%= csrf_meta_tags %&amp;gt; &amp;lt;%= stylesheet_link_tag &amp;#39;application&amp;#39;, media: &amp;#39;all&amp;#39;, &amp;#39;data-turbolinks-track&amp;#39;: &amp;#39;reload&amp;#39; %&amp;gt; &amp;lt;%= javascript_include_tag &amp;#39;application&amp;#39;, &amp;#39;data-turbolinks-track&amp;#39;: &amp;#39;reload&amp;#39; %&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;container-fluid&amp;#34;&amp;gt; &amp;lt;%= render &amp;#34;common/navbar&amp;#34; %&amp;gt; &amp;lt;%= yield %&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;%= render &amp;#34;common/footer&amp;#34; %&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &amp;lt;%= yield %&amp;gt; 是其他程式碼輸出的地方，也就是網頁的主要內容，會一直跳轉。</description>
    </item>
    
    <item>
      <title>許我一個美麗的Terminal</title>
      <link>https://ichennn.github.io/blog/2017/07/%E8%A8%B1%E6%88%91%E4%B8%80%E5%80%8B%E7%BE%8E%E9%BA%97%E7%9A%84terminal/</link>
      <pubDate>Sat, 22 Jul 2017 14:54:32 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/%E8%A8%B1%E6%88%91%E4%B8%80%E5%80%8B%E7%BE%8E%E9%BA%97%E7%9A%84terminal/</guid>
      <description>每天都去辦公室的話，自然就會想要把座位妝點的溫馨舒適：每天都開電腦，也自然就會想著要換個賞心悅目的漂亮桌面。
同理可證，每天都開terminal，怎麼捨得讓他黑壓壓一片字又小不拉機的還不去處理呢！
其實稍微爬一下國外的網站，就有很多如何客製化終端機的教學，但為了不要讓自己每次改過就忘，在此做個紀錄。
首先，叫出.bash_profile. 這個檔案 (或是.zshrc)
$ subl ~/.bash_profile (~/.zshrc) 加上這兩段：
#enable color export CLICOLOR=&amp;#39;true&amp;#39; export LSCOLORS=&amp;#34;gxfxcxdxcxegedabagacad&amp;#34; #change hostname color shown in terminal export PS1=&amp;#34;\[\e[0;33m\]\u\[\033[m\]@\[\033[2;93m\]\h:\[\033[0;32m\]\w\[\033[m\]\$ &amp;#34; 若是zsh的話：
export PROMPT=&amp;#34;%F{green}%n@%m%f: %F{yellow}%.%f $ &amp;#34; 其中
\u 是user name \h 是host name \w 是working directory $ 和 ＠ 看個人喜好，也可以換成其他喜歡的符號 字母後面的是顏色的色碼，一樣可以在網路上查到各式各樣的顏色 （關鍵字：terminal color code）
最後別忘了 source ~/.bash_profile
按照上面的設定，最後的成果長這樣：</description>
    </item>
    
    <item>
      <title>吃燒肉，學日文（？</title>
      <link>https://ichennn.github.io/blog/2017/05/%E5%90%83%E7%87%92%E8%82%89%E5%AD%B8%E6%97%A5%E6%96%87/</link>
      <pubDate>Sun, 14 May 2017 20:20:48 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/05/%E5%90%83%E7%87%92%E8%82%89%E5%AD%B8%E6%97%A5%E6%96%87/</guid>
      <description>來到日本之後，開學季的各種聚餐與社交（？）活動不斷，四月就已經吃了兩次燒肉（荷包君哭泣
但先不論肉好不好吃，錢噴了多少（咦) 最重要的還是要讓吃燒肉這個活動一次比一次得心應手啊！！（？
趁著還沒忘記（但這位大姐，已經隔了一個月了耶 囧），把一些吃飯中學到的單字記錄下來ＸＤ
推開門之後 首先，一進門服務生會先問幾個人，然後問有沒有抽菸需求（像燒肉、大阪燒這種聽起來很豪邁（？的店家似乎都會備有吸煙區）
「おタバコお吸いになりますか？」
「喫煙席、禁煙席どちらがよろしいでしょうか？」
大致有這兩種問法，因為隔太久了我有點記不清那天被問什麼ＸＤ但一開始沒預想到會被問這個問題，還愣了一下ＸＤ
開吃囉 「カルピ・カルビ」 肋骨旁邊的肉 （牛胸肉？ＸＤ），通常是不帶骨的，有點油花，應該說是 牛五花 比較恰當？也稱作**「バラ肉」**。
一拿到菜單就看到滿滿的カルピ啊ＸＤＤＤ這好像是一個從韓文翻譯過來的詞，所以不同的店家可能有些會使用カルピ，有些則會使用カルビ，但不論是哪個，都是一樣的意思。也有人說是「好肉」（？）的代名詞ＸＤ
網路上找了一張圖，大概是這種感覺：
(Source: https://www.sagae29.jp/parts/)
「ササミ肉」 雞胸肉。
這其實不是在燒肉店看到的，燒肉店大多以牛肉為主。不過如果到超市，很多熟食都是雞肉，「ササミ肉」就很常見了，就是一個很安全的部位，挑食如我也很少踩雷ＸＤ
「タン」 牛舌。
因為菜單其實都看不懂，所以只好全部點一輪（咦）然後這個就特別軟Ｑ嫩，有種&amp;hellip;.很像舌頭的觸感啊～～（不是很像而已，他就是啊！！
「ホルモン．モツ」 各種內臟。
因為不知道是什麼，就隨便點了一盤&amp;hellip;..結果咬不爛&amp;hellip;&amp;hellip;完全咬不爛&amp;hellip;&amp;hellip;這什麼巫術 囧
在維基上的定義是這樣的：「狭い意味では、小腸、大腸を、広い意味では正肉以外のかつて廃棄していた部位をも含む臓物肉全般が含まれ、皮、胃、肝臓、心臓、腎臓、子宮、肺、腸などを用いる。」
…….日本人好可怕。而且查了一下還有ホルモン專門店，人氣還高著呢～（黑人問號臉ＱＱ
「タレ．塩」 醬汁或鹽味。
好像大部分的店家同一種單品都會有這兩種口味可以選（好啦，其實我不知道是不是大部分，因為我只吃過兩家（欸）
一些阿哩阿雜的 「網（あみ）交換をお願いします」 換網子。不用全部清空，店員會跟你一起手忙腳亂（？）的把他們移走ＸＤＤＤ
「お皿もう一枚お願いします・ください」 再給我一個盤子。有時候人一多，或是杯盤狼藉之後（？）盤子就容易搞失蹤不夠用ＸＤ
實際寫完才發現其實單字沒有想像中的那麼多，大概大部分的時候還是忙著吃ＸＤ（不用急著自爆</description>
    </item>
    
    <item>
      <title>京都初來乍到——忙碌的week 1＆2</title>
      <link>https://ichennn.github.io/blog/2017/04/%E4%BA%AC%E9%83%BD%E5%88%9D%E4%BE%86%E4%B9%8D%E5%88%B0%E5%BF%99%E7%A2%8C%E7%9A%84week-12/</link>
      <pubDate>Mon, 17 Apr 2017 23:50:11 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/04/%E4%BA%AC%E9%83%BD%E5%88%9D%E4%BE%86%E4%B9%8D%E5%88%B0%E5%BF%99%E7%A2%8C%E7%9A%84week-12/</guid>
      <description>本來是想要一天一天寫的，可是實在忙到每天回家累得只想睡覺。好不容易週末有點小空閒，只能寫個濃縮版的ＸＤ紀錄一下慌慌張張的前兩週。
以下是大地遊戲的破關紀錄orz
第一站：海關 拿著護照、在留證明（應該會釘在護照裡）、資格外許可，想說終於不是以觀光客的身份來了！說不定可以不用排隊！
….結果就被海關的阿姨指引到大排長龍的外國人隊伍當中orz
「新しい在留カードを作りますので〜」
…&amp;hellip;好吧ＱＱ然後我就排了一個小時的隊，完全錯過我當初查的電車時刻ＸＤ
第二站：京大國際交流會館おうばく分館 拖著我的30kg大箱子一路從關西空港轉車來到荒郊野外的黃檗之後&amp;hellip;&amp;hellip;就立刻發現人行道在施工orz
乾 老娘拖著一個30kg的箱子啊，連個平路都不給我！
好不容易脫離凹凸不平的路段，迎接我的就是傳說中的上坡路了ＱＱ其實坡不陡，只是很長，所以大概走一半之後就會開始覺得人生怎麼這麼困難 囧
撇開路途遙遠又荒涼之外，宿舍其實還是很不錯的，有陽台、廚房、衛浴，家具也都齊全了，基本上就是一卡皮箱可以入住ＸＤ公用設施有洗衣機、烘衣機、微波爐、熨斗跟吸塵器。
電費和房租是分開繳的，房租要轉帳或信用卡付款，電費可以直接去超商繳。另外覺得神奇的一點是，每個禮拜可以更換新床單、枕頭套，不用自己洗耶！不過懶人如我，第一週就沒去換ＸＤ反正還很乾淨嘛～
第三站：學生證＆定期券 身為一個需要長途通勤的人，來日本後第二天最最最重要的事就是趕緊去領學生證，這樣才能買通學券。
京阪電車的通學券不是每個車站都可以購買，詳細的站點要上網查，但出町柳是一定可以的ＸＤ畢竟京都大學就在旁邊而已
通學券需要： 學生證 通學證明（在學校申請，上面會寫居住地址） ＄＄（廢話） 我一口氣就買了6個月份的通學券，直接印在ICOCA上，也有磁氣券可以選擇，不過磁氣券如果遺失似乎是不能補發的。
有了這張電車神器（？）之後，在記載的區間內可以自由上下車，不限次數、時段，超讚的！（而且京阪搭起來超舒服的，常常不小心睡著ＸＤ）
第四站：漢字註記 這一站應該算是optional的，就只是一個気持ち問題。
入國的時候在海關拿到的卡，上面只會有羅馬拼音，不會有漢字。雖然不會有什麼太大影響，但就是&amp;hellip;因為卡上面沒有記載漢字名，所以所有正式的文件都只能用拼音，變成自己原本的名字反而不被承認，感覺有點差ＸＤ
漢字註記也不難，就去入管填幾張申請文件，然後到隔壁巷子買印紙¥1300，然後漫長無止盡的等待&amp;hellip;&amp;hellip;就會得到一張新的在留卡。不得不說，真的&amp;hellip;&amp;hellip;很慢orz 幾乎一整個下午就耗在上面，等弄完其他事情也不用做了可以直接回家吃飯休息 囧
但總之拿到了有漢字的在留卡，成就達成（？
第五站：住所登錄＆健康保險 因為黃檗屬於宇治市的範圍，因此要去宇治市役所登錄住址，規定好像是確定住址14日以內一定要登錄。
更重要的是，不登錄住址就沒辦法申請手機啊～～各個關卡都是環環相扣的ＸＤ
進入市役所大廳後，找到市民課，直接到受付表明要登陸住址就可以了。日本和台灣不太一樣，這種辦事情的地方（？）通常都有所謂的「受付」，像是報到處的感覺，所有人都必須通過這個窗口，才能拿到申請表格或是號碼牌之類的東西。
所以如果突然湧入很多人，受付就會塞車&amp;hellip;&amp;hellip;.就像入管局一樣ＸＤ
登陸完的住址會直接印在在留卡的背面，黑色的墨水看起來有點反光，不知道在皮夾裡磨來磨去會不會很快就血肉模糊（不對
接下來要到隔壁的健康保險課（名稱有點忘了ＸＤ）辦理健康保險，只要是在留資格超過三個月的外國人都必須要辦理（＝需要繳錢ry）資料填好之後，就會得到一張薄薄的紙&amp;hellip;.還有一個保護套ＸＤ就是所謂的健保卡了
還有一點很桑心的是，市役所有免費的茶水可以喝，可是只開放到4點半….我想說先去上個廁所，結果出來4點33分飲水機就斷電了！！！！（吶喊
你們不是五點才下班嗎！！！到底！！！
第六站：手機 終於來到手機這關！總覺得人在日本，沒有日本手機＆號碼就沒有實感啊～
先說辦手機現在有很多種選擇，各有優缺。
三大電信：docomo、au、softbank，優點是穩定＆有キャリアメール，缺點一言以蔽之，就是貴！！ 格安sim：很多家可以選，我最後選擇用line mobile，每個月的金額取決於網路流量大小跟通話時數，省一點的話通常可以壓在2000以內。 我一開始就打定主意要買支二手手機，然後辦格安sim。雖然三大電信都有學生方案，並且可以把手機費用壓到極低（softbank月月割的iphone7甚至只要月繳¥500左右，但是每個月的話費&amp;hellip;.ＱＱ），不過冷靜想想，綁約兩年＋每個月高額通話費（而且網路流量也沒特別多）＋應該沒什麼人會打給我（欸），格安sim還是怎麼看怎麼划算啊。
最後選擇line mobile的理由，是因為line、facebook、ig、twitter不算在月流量裡面，即使流量爆了被降速，這幾個軟體還是可以維持高速，完全是為了我這種line重度成癮者設計的ＸＤＤＤ
不過line mobile在京都沒有可以直接申辦的店面，因此只能網路辦，我辦了兩次才通過&amp;hellip;&amp;hellip;請大家記得填的地址一定要跟在留卡上的一模一樣！！**一！模！一！樣！**即使覺得是一樣的意思，多一個字少一個字都不行ＱＱ非常嚴格的&amp;hellip;&amp;hellip;
第七站：研究室！ 大學的時候，因為科系的關係，並沒有體驗過這種實驗室或研究室的氛圍。因此我也把他列入我的闖關過程中ＸＤ
老師同學們都很親切，而且可以感覺得到研究室有非常多的資源。
可能也是科系的緣故，我在研究室有個人專屬的座位，座位上有桌上型電腦，修士課程的學生還另外配一台筆電。Office有正版的license，還幫灌好雙系統了ＸＤ
覺得資源富足到很幸福ＸＤ（很好哄耶）
第八站：開戶 下集待續，因為我還懶得去辦（乾</description>
    </item>
    
    <item>
      <title>跨領域的不安與小確幸——京大情報學研究科 院試合格心得（下）</title>
      <link>https://ichennn.github.io/blog/2017/03/%E8%B7%A8%E9%A0%98%E5%9F%9F%E7%9A%84%E4%B8%8D%E5%AE%89%E8%88%87%E5%B0%8F%E7%A2%BA%E5%B9%B8%E4%BA%AC%E5%A4%A7%E6%83%85%E5%A0%B1%E5%AD%B8%E7%A0%94%E7%A9%B6%E7%A7%91-%E9%99%A2%E8%A9%A6%E5%90%88%E6%A0%BC%E5%BF%83%E5%BE%97%E4%B8%8B/</link>
      <pubDate>Tue, 28 Mar 2017 21:24:04 +0800</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/03/%E8%B7%A8%E9%A0%98%E5%9F%9F%E7%9A%84%E4%B8%8D%E5%AE%89%E8%88%87%E5%B0%8F%E7%A2%BA%E5%B9%B8%E4%BA%AC%E5%A4%A7%E6%83%85%E5%A0%B1%E5%AD%B8%E7%A0%94%E7%A9%B6%E7%A7%91-%E9%99%A2%E8%A9%A6%E5%90%88%E6%A0%BC%E5%BF%83%E5%BE%97%E4%B8%8B/</guid>
      <description>科系選擇＆跨領域——文系？理系？ 在進入念書考試心得之前，想先記錄一下關於選擇科系的眉角（？
跨領域當然有其難度，不過也許是最近這幾年的流行（？，打破文理分界的科系越來越多，有時候跨領域專長還有種潮潮的感覺（欸
以日本大學院來說，就我觀察到的大概呈現兩種趨勢：
**傳統、古老、較封閉的：**這種研究科通常底下有相對應的學部，每年新入生幾乎都是學部直升，不太容易跨考（無論是換學校或是換領域都是） **主打創新、標榜多元：**通常主打多元專業背景、文理融合、創新價值，較高機率出現在新成立不久的研究科或是底下沒有直接對應的學部，通常有一定比例的外國人 這兩種並沒有孰優孰劣，前者的好處應該是研究容易上軌道、深度也夠（畢竟學＋碩都6年了），後者就是給跨領域或對於自身專業另有想法的人一個選擇，可以迸出燦爛的火花（？也說不定。
目前觀察到比較明顯的例子大概是東大情報理工 v.s. 東大情報學環，有興趣可以研究一下他們的差異。
無論文科理科，通常到了大學院都要有一定的研究底子，以及語言能力（不然讀文本應該會被電爆），因此有些教授會要求先當一年研究生。
而強調文理不問的大學院，通常只要求基本學科達到一定水平，反而比較注重想法與溝通力之類的（≒英文），梳理到這裡似乎可以理解為何教授沒有要求我當一年研究生，我也能這麼傻傻愣愣地就跨過門檻進去了。
可是我實在很怕進得去出不來啊
報考京都大學——入學考試 情報學研究科AO入試 AO入試類似於台灣的推甄申請，主要以審查資料、小論文、面試等等手段來評斷合格與否。京大情報學研究科當中，只有社會情報專攻有AO入試，可能也與這個專攻標榜融合不同專業背景有關。
報名期間在四月，若合格則是十月入學。我當初看到不用考試，就一整個懶病逃避病發作，覺得這完全就是給我申請用的簡直天賜良機（當然後來發現完全不是這麼回事）
要求繳交的資料有：志望說明書、成績單、推薦信兩封、英文成績、願書等
強烈建議把募集要項一個字一個字看清楚看仔細，**「および」「または」**傻傻分不清楚的苦主在此。為了彌補眼殘我還多寄了一趟DHL結果還落榜，豈是一個慘字了得QQ
過程沒有太多可以分享的，因為我根本沒被面試到，就直接掰掰了。放榜當天還是有點難過的，雖然不是太意外，但一想到我還差得好遠好遠，隔天還要打起精神參加畢業典禮，就覺得人生好難（躺
曾經聽過「日本AO入試是要招收『異才』」這樣的說法，我想，社會情報AO期望收到的學生應該也是在這個領域中已經有傑出的成果或嘗試，甚至是從別的領域試圖與情報學做結合。
看重個性與潛力這種說法應該只適用學部吧ＸＤ大學院如果沒有相當的研究成果，應該是很難說服教授只憑幾張紙就把你收進門的。
猛然發現我在申請資料裡看起來應該就是個廢才吧ry
情報學研究科一般入試 等畢業典禮過了、大學最後一次期末也結束了，回到宿舍，翻開過去問，才真的有種要走入戰場的感覺。
因為並非本科系出身，也已經火燒眉毛了（此時距離考試倒數40天），於是我決定先從研究考古題開始。就像高中的閱讀測驗，老師總是教先看題目再看文章，過了這麼多年我才發現這招真的好用ＸＤ
所謂的研究考古題，並不是單純多寫幾次，而是觀察出題的範圍、方向與趨勢。
筆試總共分為三部份：情報學基礎、專門科目、一般論述
而成績則分為四部分：情報學基礎100點、專門科目200點、一般論述100點、英語200點、口頭試驗100
之前在網路上找到一篇日本考生的心得，分析因為學科部分都是以前上課的內容，因此得點不會差距太大，一般論述是個人本事，也無法短時間加強——因此社會情報的決勝點在英文成績。
這段話對我的鼓舞很大，因為廢才我什麼都沒有，就剛好有一張分數很高的多益（社會情報接受多益、托福、雅思任一種成績，如果不是英文超強或剛好需要考托福雅思，考多益絕對是CP值最高的選項，省錢省力省時間）
因此我的40日讀書目標是：
情報學基礎一定要唸到滾瓜爛熟不能失分 專門科目挑2~3個大主題細讀就好，力求不要落後學部考生太多 打點好面試的服裝＆背好自我介紹ＸＤ ＃情報學基礎 募集要項上有指定書目，其實就是大一計算機概論會用的那本：
J. Glenn Brookshear. Computer Science: An Overview. Addison-Wesley
不需要看日文版，因為考試可以寫英文啊ＸＤ而且很多專有名詞翻成片假名之後搞得像是在唸片假名讀本（？
這本我花了一整個學期把他唸好念熟，搭配台大開放式課程的影片服用，進度約是一週一單元。在學期中這麼做其實就等於多修了一門課，有時候難免想偷懶，但很慶幸當初有堅持下來。
形式是5題選3，出題的範圍是一整本。
一定會有一大題名詞解釋，有背有分；另一方面也可以幫助自己更了解基本概念 比較常出現的有operating system、algorithms、computation theory這三個單元 ＃專門科目 專門科目試卷非常厚一疊，17題選3，共有五種不同領域，根據第一志望的研究室來選擇題目。
計算機題組5題的組成每年其實大同小異：
Database 1題。主要是SQL、relational algebra、relational calculas、indexing、transaction management HCI 1題。主要是usability evaluation 的幾種方法及優缺點 Information Retrieval 1~2題。範圍很大，較難，從基本的precision/recall rate到B tree到recommendation system都有 AI 0~1題。decision tree、bayesian network等主題 情報教育 0~1題。應該是學部的一門課，主要是e-learning的概念和方法。 因為時間太少了，我決定只以資料庫跟HCI為主力目標，其他大概念一下，有考到算我撿到（欸</description>
    </item>
    
    <item>
      <title>跨領域的不安與小確幸——京大情報學研究科 院試合格心得（上）</title>
      <link>https://ichennn.github.io/blog/2017/03/%E8%B7%A8%E9%A0%98%E5%9F%9F%E7%9A%84%E4%B8%8D%E5%AE%89%E8%88%87%E5%B0%8F%E7%A2%BA%E5%B9%B8%E4%BA%AC%E5%A4%A7%E6%83%85%E5%A0%B1%E5%AD%B8%E7%A0%94%E7%A9%B6%E7%A7%91-%E9%99%A2%E8%A9%A6%E5%90%88%E6%A0%BC%E5%BF%83%E5%BE%97%E4%B8%8A/</link>
      <pubDate>Mon, 27 Mar 2017 01:22:15 +0800</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/03/%E8%B7%A8%E9%A0%98%E5%9F%9F%E7%9A%84%E4%B8%8D%E5%AE%89%E8%88%87%E5%B0%8F%E7%A2%BA%E5%B9%B8%E4%BA%AC%E5%A4%A7%E6%83%85%E5%A0%B1%E5%AD%B8%E7%A0%94%E7%A9%B6%E7%A7%91-%E9%99%A2%E8%A9%A6%E5%90%88%E6%A0%BC%E5%BF%83%E5%BE%97%E4%B8%8A/</guid>
      <description>寫在前面——跨領域 轉換領域聽起來是一件稀鬆平常的事，但做起來總是不輕鬆的。
除了心底時常會冒出質疑自己的聲音外，也更容易感到孤立無援，畢竟走的是一條與身邊的人截然不同的路，很多事情都只能強壓下不安去面對，最多就是事後能在聊天過程中一笑帶過而已。
大學唸的是某個純到不行的文院科系，大三的時候雙主修經濟，原本的規劃是研究所就轉念經濟，好歹也算是本科系的。但是，果然人算不如天算，最後決定報考的卻是京都大學情報學研究科社會情報專攻ＸＤ
情報是什麼啊？很多不太懂日文的朋友會這麼問道。情報呢，就是中文的資訊啊（笑
因此這是一篇跨得很大、從南極跨到北極（？的心得。（而且很多廢話
時程總覽與我的大轉彎時期 大轉彎時期聽起來好像什麼歷史事件一樣ＸＤ
基本上決定要轉考情報學領域是很晚的事情，認真開始唸書當然又是更晚的事情，大概跟地球的歷史當中人類出現的時間點差不多吧 囧
我的留學時程大致上長這樣，其中有很多跟學校、報名不相關的東西，正確來說比較像是心路歷程：
可以發現，其實我大部分的時間都在迷惘跟耍廢啊orz
我算是個習慣於及早開始規劃事情的人，因此在確定要考日本大學院之後，一路從雙主修的課程安排、研究計畫撰寫、找教授、筆試內容⋯⋯都想過一輪了，但是呢，還是老話一句，計畫趕不上變化啊～
大轉彎的結果就是最後半年搞得像趕場一樣處處驚險orz
報考京都大學——準備階段 雖然我在時程總覽當中有寫到筑波大學，但那其實算是我的備案，再者，考慮到報名費神貴的問題，最後決定還是全力準備京都大學就好。
AAO 京都大學的AAO是個相當奇妙的系統，美其名是由學校做統一接洽窗口，可是又只有中港台的留學生才需要跑這個流程。（聽說是因為之前中國留學生有學經歷不實的問題才導致這個系統的出現）
很多人會感到很困惑，到底應該先AAO？先聯絡教授？雖然網頁上寫說過了AAO再聯絡教授，可是教授又不知道我是誰這樣也能過？那如果一直沒消息難道我要傻傻的等？萬一被拒絕真的不能申請第二次嗎⋯⋯？
我到現在也不知道標準答案orz 大概是因人而異吧（毫無參考價值
我自己當初是照著官方流程，也就是先AAO後找教授，可能情報學研究科的老師都習慣光速回信（？，我送出申請大概兩小時就通過了（驚嚇）但是我興高采烈地寄信給教授之後，教授又光速回信說：
「抱歉哦，我要退休了」
⋯⋯蛤？經過肉身測試，教授很有可能不知道這系統到底是幹嘛的ＸＤ
但反正也通過了，我就寄信找了另一位領域接近的教授，後來也順利進入這位教授的研究室惹 ヽ(●´∀`●)ﾉ
不過後來有聽說，應該要先跟教授聯絡比較好，有的教授可能會因為不知道你哪位就放置play或是拒絕。現在想想，我真的運氣不錯ＸＤ
另外有個真實性不明的不負責任小道消息，AAO會提供好幾種選項（拒絕的狀況）給教授，包括退休、收滿、研究方向無法指導等等，還有一個翻成白話是我覺得這學生不好，叫他不要再來申請了。所以如果不幸被一位教授拒絕，其實還是有可能再次提出申請的，除非⋯⋯（乾 好傷人
聯絡教授 寄了信給我未來的指導教授，信裡附上了SOP跟個人簡歷，還有大學時代修過課的一位老師替我寫的推薦信（就是給AAO的那些東西而已）。沒寫研究計劃，因為⋯⋯不會寫orz
跨領域的弱勢此時就顯現出來了，我真的不會寫⋯⋯連亂掰都沒有頭緒的那種不會。一方面是我對這個領域的研究、論文該是什麼模式不太熟悉，另一方面就是我僅有的淺薄知識也不足以支撐我掰出一篇研究計畫。
所以我就想，與其硬著頭皮寫一篇讓人搖頭的研究計畫，不如乾脆別寫。
事實證明這是對的，因為教授根本沒問這個。（不是說這個不重要哦，原因後述）
skype其實很快就結束了，教授滿親切的，談話也沒有我原先想的那麼嚴肅可怕，問了一些基本（？題：
不是相關科系的你，對這個領域了解多少？有拿過去問寫寫看嗎？ 來日本留學有經濟壓力嗎？ 除了京大還有申請別的學校嗎？ 結論其實也很簡單，就是考上了就收，努力唸書啊～
腦子稍微冷卻一點之後，有如大夢初醒。這幾天準備的擬答命中率是0，不禁開始檢討我的思維發生了什麼事，為什麼我以為老師在意的他似乎一點也不在意？
只能說，我似乎還沒進入狀況，簡單來說**我以為應該著重在我的賣點，殊不知重點在於該如何彌補我的缺點**。
比起一些冠冕堂皇的溢美之詞，我覺得教授對於實際面的問題更有興趣就是了。畢竟真的入學後，很多事不能光靠嘴砲解決。當然如果背景與能力非常足夠，教授就會對你的動機跟研究主題很有興趣了（應該吧xd）
於是我就連滾帶爬（？的衝出門去寄EMS了。
索取過去問 索取考古題的方法各研究科的網站都會寫，有些有電子檔有些則要寄信去拿。從台灣寄EMS的話，大約3天會到，內附回郵信封跟郵票就可以了。當初有點苦惱到底該怎麼放，提供一下我的作法:
（由外到內）EMS信封 ← A4信封(上面用紅筆寫過去問請求之類的，依網頁規定) ← 回郵信封、郵票¥900 日本郵票可在牯嶺街上的郵幣社買到，旁邊就是南海郵局，兩個願望一次滿足～ 另外EMS是看重量計價，所以如果要索取的資料很多很重的話可能要多附一點郵票。</description>
    </item>
    
    <item>
      <title>在Hugo寫完文章，卻push不上github怎麼辦？</title>
      <link>https://ichennn.github.io/blog/2017/03/%E5%9C%A8hugo%E5%AF%AB%E5%AE%8C%E6%96%87%E7%AB%A0%E5%8D%BBpush%E4%B8%8D%E4%B8%8Agithub%E6%80%8E%E9%BA%BC%E8%BE%A6/</link>
      <pubDate>Tue, 21 Mar 2017 00:33:37 +0800</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/03/%E5%9C%A8hugo%E5%AF%AB%E5%AE%8C%E6%96%87%E7%AB%A0%E5%8D%BBpush%E4%B8%8D%E4%B8%8Agithub%E6%80%8E%E9%BA%BC%E8%BE%A6/</guid>
      <description>今天突然心血來潮想說自己來改改看hugo theme的樣式，CSS門外漢的我，就每個檔案都給它打開來研究研究，然後手賤的塗塗改改，想說反正hugo server 上面看爽的就好，改壞了大不了重新git clone下來就好惹～～
結果，門外漢的我還是手賤，push了一些也不知道自己在改啥的東西上去後&amp;hellip;&amp;hellip;就發現放hugo souce的repo裡的submodule好像不同步&amp;hellip;&amp;hellip;？
…&amp;hellip;我真的不知道我剛剛做了什麼（崩潰
為什麼public裡面的靜態網頁push不上去ＱＱＱ救命哦
想當然，就算喊破喉嚨應該也是沒人能救我 囧
自己的手賤自己救，拜過估狗大神後還是把它弄好了（雙手合十
所以我到底對他做了什麼呢？ …….我真的不知道啦（哭
→可能原因： push順序錯誤： 因為submodule的內容不會被連帶更新，所以要先push submodule再push上一層（如果有需要的話），不然從上一層repo連結過去會是前一次push的內容。
只要連過去後發現，在顯示branch:master的地方會顯示tree:&amp;lt;上一次的commit&amp;gt;，應該就是不小心忘了先push submodule的目錄。
此時在submodule裡面嘗試push的話，就會顯示：
Everything up-to-date 一開始看到我真的是滿頭問號orz明明最新的內容都push不上去你還騙我說什麼up-to-date&amp;hellip;.
解決方法 參照這篇 [註一]，總結來說就是：
$ cd &amp;lt;submodule directory&amp;gt; $ git checkout master $ git merge HEAD@{1} $ git push origin master 因為現在其實有兩個branch。
$ git branch * (HEAD detached from &amp;lt;上一次的commit&amp;gt;) master 除了master以外，另一個就是我們現在所處的branch 。所以解決方法就是要把這兩個莫名其妙被我搞出來的東西merge在一起。當輸入merge指令之後，會看到：
$ git merge HEAD@{1} Updating 300cd65..08987fb Fast-forward blog/.DS_Store | Bin 6148 -&amp;gt; 6148 bytes blog/{year-month-day =&amp;gt; 2017}/.</description>
    </item>
    
    <item>
      <title>如何用Hugo架出乾淨簡潔的部落格</title>
      <link>https://ichennn.github.io/blog/2017/03/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%9E%B6%E5%87%BA%E4%B9%BE%E6%B7%A8%E7%B0%A1%E6%BD%94%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/</link>
      <pubDate>Mon, 20 Mar 2017 20:28:57 +0800</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/03/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%9E%B6%E5%87%BA%E4%B9%BE%E6%B7%A8%E7%B0%A1%E6%BD%94%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/</guid>
      <description>從小時候就一直覺得寫自己的部落格是一件很潮很厲害的事，當然也經營過好幾個，從最一開始的yahoo部落格、無名小站到天空部落，前前後後也寫了好幾年，可是最後都虎頭蛇尾收場ＸＤ還是別提了
但是從很早之前，我就一直對這些部落格平台有一些小小的不滿（？
首先，樣板很固定，用過的幾個當中，大概只有天空算比較自由，其他就&amp;hellip;&amp;hellip;xd 很多時候只是想寫一些自己的碎碎念，並不想要知道有多少人看過，也不想要有人對此發表評論。 有廣告有廣告有廣告啊啊啊 直到最近開始學著用github之後，意外發現可以利用github pages存放靜態頁面。於是又重新燃起了我寫部落格的熊熊大火啊
Hugo是什麼？ 簡單來說就是一個靜態網頁生成器，簡單快速好用。
可以放在任何可host網站的空間，如github或FTP。 用Go語言寫成，據說比Jekyll穩定且快（當然也比較簡單ＸＤ
這個網站怎麼生出來的？ 有多簡單好用呢？用Hugo架一個部落格，大概需要以下幾個步驟，根據官網的Quick start這個過程大概只要2分鐘：
下載hugo hugo new site &amp;lt;sitename&amp;gt;，然後cd進themes，網路上隨便找個順眼的主題，把它git clone下來（ps. 如果想放github上的話，這邊請用submodule） hugo new post/&amp;lt;title&amp;gt;.md ，寫點什麼東西進去 hugo server 就可以在本地看到熱騰騰的網站了 好了，結束收工（欸
不是啦，其實還是有很多細節可以設定，在config.toml 當中可以客製化一些細節，也可自己寫一個css覆蓋原本的主題做微調。真的要鑽研也是研究不完，像是short code我到現在還是沒弄懂 囧
Hugo官網裡面有很多好玩的設定，留著日後慢慢看ＸＤ
Hosting on Github 然後呢？總不能這麼簡單漂亮的網站只有我自己看得到吧？
我當初為了研究怎麼把它放上github，搞了一天一夜快要瘋掉，官網上的教學一個很複雜不想看懂（欸），一個怎麼試都失敗搞得我很火大ry
順帶一提github pages有分成user page跟project page兩種，托hugo的福，我之前一直不知道原來有分別，詳細差別參見官方。
最後在各種英文日文網站的教學拼拼湊湊下，終於成功使用user page放上去惹～（也就是網址是github.io結尾）：
Step1: 準備兩個repository 一個命名為&amp;lt;username&amp;gt;.github.io，用來放產生的靜態頁面；另一個隨意，用來放Hugo site的source code。
Step2: 利用hugo架網站囉 $ hugo new site &amp;lt;sitename&amp;gt; $ cd &amp;lt;sitename&amp;gt; $ hugo new post/&amp;lt;title&amp;gt;.md #文章會放在content/post裡 $ git init $ git remote add origin &amp;lt;隨意&amp;gt;.</description>
    </item>
    
  </channel>
</rss>
