<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning on Murmuring</title>
    <link>https://ichennn.github.io/categories/learning/</link>
    <description>Recent content in Learning on Murmuring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Apr 2023 09:03:08 +0900</lastBuildDate><atom:link href="https://ichennn.github.io/categories/learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>讓Hyde-X theme重新動起來</title>
      <link>https://ichennn.github.io/blog/2023/04/%E8%AE%93hyde-x-theme%E9%87%8D%E6%96%B0%E5%8B%95%E8%B5%B7%E4%BE%86/</link>
      <pubDate>Fri, 07 Apr 2023 09:03:08 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2023/04/%E8%AE%93hyde-x-theme%E9%87%8D%E6%96%B0%E5%8B%95%E8%B5%B7%E4%BE%86/</guid>
      <description>距離上一次更新文章，不知不覺已經過了四年。最近想要重新振作起來，整理自己的生活，一方面希望能繼續保持生活中有所output的習慣，另一方面也是希望能有條理地回顧自己過去四年當中究竟有哪些成長與改變。
然而，就在我興致勃勃地將hugo重新載了回來之後（是的，這四年當中經歷了太多，連電腦都換了，當然也沒記得要裝hugo），發現我使用的Hyde-X模板竟然&amp;hellip;&amp;hellip;已經壞了（哭
原本也想過要不要乾脆換個模板，或是沿用Hyde，但是換成其他的fork版本。畢竟Hyde-X自從2018年起就沒有再更新維護了，以後應該只會越壞越多吧ＱＱ
不過最後峰迴路轉，實在是懶得再去調整CSS，也覺得Hyde-X有一些我滿喜歡的功能（像是label），最後決定還是自己來修吧！
其實仔細看render error，只需要修改幾個小地方，並沒有想像中的整組壞光光ＸＤ因此做個紀錄，也為之後重新寫文章做個熱身＝）
layouts/partials/sidebar.html 這裡的寫法是從另一個Hyde repo直接借過來用的
https://github.com/spf13/hyde/blob/master/layouts/partials/sidebar.html
- &amp;lt;p&amp;gt;&amp;lt;font size=2&amp;gt;Copyright &amp;amp;copy; {{ .Now.Format &amp;#34;2006&amp;#34; }} &amp;lt;a href=&amp;#34;{{ &amp;#34;/LICENSE&amp;#34; | absURL }}&amp;#34;&amp;gt;License&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt; + &amp;lt;p&amp;gt;&amp;lt;font size=2&amp;gt;{{ with .Site.Params.copyright }}{{.}}{{ else }}&amp;amp;copy; {{ now.Format &amp;#34;2006&amp;#34;}}. All rights reserved. {{end}}&amp;lt;br/&amp;gt; Note： 這一行後來在Hyde-X中被移動到layouts/partials/sidebar/footer.html中了。我也忘了當初是出於什麼理由，一直將他留在我的override的sidebar.html中
layouts/index.html 這裡是Home page裡呈現出來的全部文章列表。
原本的寫法已經deprecated，在Hyde-X的issue中也有提到。
https://github.com/zyro/hyde-x/issues/84
- {{ $paginator := .Paginate (where .Data.Pages &amp;#34;Type&amp;#34; &amp;#34;post&amp;#34;) }} + {{ $paginator := .Paginate (where .Site.RegularPages &amp;#34;Type&amp;#34; &amp;#34;post&amp;#34;) }} layouts/partials/head.html 我沒有需要使用這個功能（也不知道修改前後的使用上差異），因此也只是從上面提到的另一個Hyde repo找到同一個段落然後複製貼上，確保render會成功而已。
錯誤訊息如下：</description>
    </item>
    
    <item>
      <title>用google cloud platform 開jupyter notebook!</title>
      <link>https://ichennn.github.io/blog/2018/01/%E7%94%A8google-cloud-platform-%E9%96%8Bjupyter-notebook/</link>
      <pubDate>Mon, 29 Jan 2018 14:49:08 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2018/01/%E7%94%A8google-cloud-platform-%E9%96%8Bjupyter-notebook/</guid>
      <description>參照這篇，做個紀錄以免我以後又忘了（真的很金魚腦 該怎麼辦
https://towardsdatascience.com/running-jupyter-notebook-in-google-cloud-platform-in-15-min-61e16da34d52
創建google cloud platform 帳號 直接用自己的google帳號就可以惹，一年有300美試用額度，對一般人而言真的是綽綽有餘了
建立vm instance : compute&amp;gt; compute engine
安裝google cloud sdk: 可以使用本地terminal利用SSH連線登入google cloud platform的server，不一定要使用，也可以直接網頁上點一下SSH開啟console
不過用gcloud指令的話傳檔案比較快ＸＤ
解壓縮之後，執行install.sh
我自己就莫名其妙一直有奇怪的錯誤訊息（不過好像還是有安裝成功&amp;hellip;吧），接著要認證帳戶
輸入gcloud auth login ，瀏覽器會自動跳出google帳號的頁面讓你點選登入的帳號
接下來就可以使用gcloud了
到google cloud platform的vm那邊，點選SSH連線旁邊小三角形後再選查看gcloud指令
會出現類似gcloud compute --project &amp;quot;&amp;lt;project-id&amp;gt;&amp;quot; ssh --zone &amp;quot;&amp;lt;your-zone&amp;gt;&amp;quot; &amp;quot;&amp;lt;instance-name&amp;gt;&amp;quot; 的指令，在terminal輸入後就可以用SSH連線到google cloud platform
安裝anaconda3 wget http://repo.continuum.io/archive/Anaconda3-4.3.0-Linux-x86_64.sh bash Anaconda3-4.0.0-Linux-x86_64.sh source ~/.bashrc 設定網路 Network &amp;gt; VPC network
External IP address :先將網路改成static
Firewall rule: 建立一個新的rule允許port tcp:5000 (or 任何一個想要指定開啟notebook 的port)
設定jupyter notebok jupyter notebook --generate-config 建立config檔（若沒有的話）</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 部署到Heroku囉！</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E9%83%A8%E7%BD%B2%E5%88%B0heroku%E5%9B%89/</link>
      <pubDate>Sat, 22 Jul 2017 17:54:54 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E9%83%A8%E7%BD%B2%E5%88%B0heroku%E5%9B%89/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何解決上傳到Heroku時可能碰到的一些亂七八糟的小毛病。以及如何在Heroku上實現使用者上傳圖片的功能。
##第一次部署到Heroku
首先，安裝Heroku的 gem。再來，註冊一個Heroku帳號。
接下來照著這篇：https://www.railstutorial.org/book/beginning 的1.5章將Rails的設定都弄好就行了！
網路上有一些聲音認為Heroku實在是太囉唆麻煩，一大堆設定，搞不好又會上傳失敗，作為一個server實在是讓人惱火。
嘛，確實ＸＤ不過以一個新手的觀點來說，因為是免費的（當然，需要更大的空間的話就要付費的），而且玩過Heroku的人多，就算碰到什麼問題也總是能估狗到答案的，就這兩點來說還是滿不錯的啦。
heroku update 在一般情況下，要將專案push到Heroku上，是這樣下指令的：
git push heroku master
但在進行Rails專案時，可能會開好幾個branch，假設今天要把branch h03 push到heroku 上面的話也很簡單，只要：
git push heroku h03:master
然後 heroku run rake db:migrate
就可以用 heroku open 打開熱騰騰的網站了！
另外，經過實測，有幾點問題值得紀錄：
heroku上無法顯示flashes (解決方式未知，因為覺得flash很醜，乾脆就不用了ＸＤ) 在app/assets/stylesheets/application.scss 當中加入 @import &amp;#34;bootstrap-sprockets&amp;#34;; @import &amp;#34;bootstrap&amp;#34;; 會使heroku無法push (原因未知)
這兩點因為沒什麼必須性，因此為了省麻煩我就都直接刪掉了ＸＤ
解決在heroku上圖片無法顯示的問題 好不容易上傳成功，結果一打開——哇，所有的圖片都不見惹～～～的這種惱火感真的很讓人難忘啊&amp;hellip;
不過解決方法也不複雜，把設定改一下就行了。只要到Config/environments/production.rb 當中，將
config.serve_static_files = ENV[&amp;#39;RAILS_SERVE_STATIC_FILES&amp;#39;].present? 改成
config.serve_static_assets = true 上傳圖片＋Heroku 好的，終於辛辛苦苦把上傳圖片的功能做好了，想要傳到heroku上面自己看著爽一下，殊不知&amp;hellip;&amp;hellip;
heroku不能儲存使用者自己上傳的圖片啊！！！！
（抱頭痛哭
好的，哭完了還是要來想想辦法
1.AWS S3
先說結論，利用AWS S3儲存圖片就可以解決這個問題了
步驟參照這篇：http://blog.qinfeng.io/posts/1383092</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] Carrierwave實作圖片上傳功能</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-carrierwave%E5%AF%A6%E4%BD%9C%E5%9C%96%E7%89%87%E4%B8%8A%E5%82%B3%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sat, 22 Jul 2017 17:54:35 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-carrierwave%E5%AF%A6%E4%BD%9C%E5%9C%96%E7%89%87%E4%B8%8A%E5%82%B3%E5%8A%9F%E8%83%BD/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何用Carrierwave這個gem實作圖片上傳功能。
上傳圖片功能 首先要安裝carrierwave 跟rmagick 這兩個gem
Gemfile :
gem &amp;#39;carrierwave&amp;#39; gem &amp;#39;rmagick&amp;#39; 小插曲 在安裝rmagick之前，要先用homebrew 安裝imagemagick
$ brew install imagemagick 然後安裝rmagick 的時候，可能會出現這樣的錯誤訊息：
Building native extensions. This could take a while... ERROR: Error installing rmagick-2.16.0.gem: ERROR: Failed to build gem native extension. /Users/Hung/.tokaido/Rubies/2.2.2-p95/bin/ruby -r ./siteconf20170629-2407-7s934e.rb extconf.rb checking for clang... yes checking for Magick-config... no checking for pkg-config... no Can&amp;#39;t install RMagick 2.16.0. Can&amp;#39;t find Magick-config or pkg-config in /Users/Hung/.</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 實作簡易的搜尋和最新消息功能</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%AF%A6%E4%BD%9C%E7%B0%A1%E6%98%93%E7%9A%84%E6%90%9C%E5%B0%8B%E5%92%8C%E6%9C%80%E6%96%B0%E6%B6%88%E6%81%AF%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sat, 22 Jul 2017 17:40:26 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%AF%A6%E4%BD%9C%E7%B0%A1%E6%98%93%E7%9A%84%E6%90%9C%E5%B0%8B%E5%92%8C%E6%9C%80%E6%96%B0%E6%B6%88%E6%81%AF%E5%8A%9F%E8%83%BD/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何實作最新消息功能和簡易的搜尋功能，不使用任何gem。當然，有很多現成的gem可以達到非常強大的搜尋功能，若有需要也想找機會試試（可是功能越強大說明通常也就越難懂ＸＤ（哭）。
簡易搜尋功能 以搜尋書本為例：
想達到的功能是在書本列表當中可以搜尋想要的書（title和description都可以對應）
首先，找到想放置搜尋bar的頁面：app/views/groups/index.html.erb
加入下面這一段code，做一個陽春的搜尋框
&amp;lt;div&amp;gt; &amp;lt;%= form_tag groups_path, id: &amp;#34;search-form&amp;#34;, :method =&amp;gt; &amp;#34;get&amp;#34; do %&amp;gt; &amp;lt;%= text_field_tag :search, params[:search], class: &amp;#39;btn btn-default&amp;#39;, placeholder: &amp;#34;Search Books&amp;#34; %&amp;gt; &amp;lt;%= submit_tag &amp;#34;Search&amp;#34;, class: &amp;#39;btn btn-default&amp;#39;, name: nil %&amp;gt; &amp;lt;% end %&amp;gt; &amp;lt;/div&amp;gt; 再來找到controller：app/controllers/groups_controller.rb
更改index的部分，這樣才會顯示搜尋結果。記得paginate的部分也要寫，不然搜尋結果的頁面會報錯
def index if params[:search] @groups = Group.search(params[:search]).recent.paginate(:page =&amp;gt; params[:page], :per_page =&amp;gt; 10) else @groups = Group.all.recent.paginate(:page =&amp;gt; params[:page], :per_page =&amp;gt; 10) end end 最後是model的部分：app/models/group.</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 好用的will_paginate及simpl_ form_for</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%A5%BD%E7%94%A8%E7%9A%84will_paginate%E5%8F%8Asimpl_-form_for/</link>
      <pubDate>Sat, 22 Jul 2017 17:10:16 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%A5%BD%E7%94%A8%E7%9A%84will_paginate%E5%8F%8Asimpl_-form_for/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何使用will paginate 及 simple form for這兩個方便又好用的gem來使網站變得更美觀。
use simple_form_for Simple_form_for 是一個好用的gem，可以自動調整格式
如果還沒安裝的話，記得先在gemfile裡面新增gem &amp;quot;simple_form&amp;quot; ，然後 bundle install
下一步：
rails generate simple_form:install --bootstrap 執行boostrap的設定
就可以使用simple_form_for了！
使用方法也很簡單，只要將原本是form_for 的部分都替換成simple_form_for 並照著規定的格式更改內容就行了。
&amp;lt;%= simple_form_for @group do |f| %&amp;gt; &amp;lt;%= f.input :description, input_html: { class: &amp;#34;form-horizontal&amp;#34;, :rows =&amp;gt; 4} %&amp;gt; &amp;lt;% end %&amp;gt; :rows 可以用來調輸入框的高度
這是使用simple_form_for的效果：
Simple_form_for會自動偵測不可空白的欄位，並給出警告：
Reference : use form_for
&amp;lt;%= form_for @group do |f| %&amp;gt; &amp;lt;%= f.label &amp;#34;description&amp;#34;, :class =&amp;gt; &amp;#34;string optional control-label&amp;#34; %&amp;gt; &amp;lt;%= f.</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 文章刪除修改實作、修改時區和換行</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E6%96%87%E7%AB%A0%E5%88%AA%E9%99%A4%E4%BF%AE%E6%94%B9%E5%AF%A6%E4%BD%9C%E4%BF%AE%E6%94%B9%E6%99%82%E5%8D%80%E5%92%8C%E6%8F%9B%E8%A1%8C/</link>
      <pubDate>Sat, 22 Jul 2017 16:52:00 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E6%96%87%E7%AB%A0%E5%88%AA%E9%99%A4%E4%BF%AE%E6%94%B9%E5%AF%A6%E4%BD%9C%E4%BF%AE%E6%94%B9%E6%99%82%E5%8D%80%E5%92%8C%E6%8F%9B%E8%A1%8C/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何實作Rails 101教程當中沒有提供答案的文章修改刪除功能。
文章刪除修改實作 在app/controllers/posts_controller.rb 下定義edit method
def edit @group = Group.find(params[:group_id]) @post = Post.find(params[:id]) end 要記得@group 跟 @post 都要定義！不然會出現 NoMethodError
無論是Edit, update, destroy都需要
另外，edit介面也要同時加上@group跟@post，用array 方式表示，系統才能判斷是哪一個group裡面的哪一個post
&amp;lt;%= simple_form_for [@group, @post] do |f| %&amp;gt; ..... Simple_format ＆日期顯示 換行用，只要將要換行的內容放入simple_format() 當中就可以了
&amp;lt;% @posts.each do |post| %&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;%= simple_format(post.content) %&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;%= post.user.email %&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;%= post.created_at.to_date %&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;% end %&amp;gt; 關於日期的顯示方式，若是只使用最簡單的post.created_at 會以這樣的方式呈現：
若想要讓樣式看起來簡潔一些，可以加上created_at.to_date （或是 created_at.strftime(&amp;quot;%Y-%m-%d&amp;quot;) ）就會只顯示到日期，不會出現後面的UTC之類的
時區更改 想要改到自己地區的時區，到config/application.rb 改設定：</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 基本View構成——HTML&amp;CSS</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%9F%BA%E6%9C%ACview%E6%A7%8B%E6%88%90htmlcss/</link>
      <pubDate>Sat, 22 Jul 2017 15:43:37 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%9F%BA%E6%9C%ACview%E6%A7%8B%E6%88%90htmlcss/</guid>
      <description>這是第一次用Ruby on Rails 做出一個完整的網站。
已經架在Heroku上了： https://gentle-inlet-97986.herokuapp.com/
可能跑的有點慢，畢竟整個專案很肥ＸＤ
這次的主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄一些和View構成有關的部分。
HTML partial 顧名思義，就是把一份html檔拆成好多部分來組合
基本上，一個頁面可以拆成三個部分：navbar, footer, 中間的內容。這麼拆的好處是，可以將上下兩條bar設定成全域樣式，中間的內容無論怎麼跳轉，都不會影響到上下方的bar
網站上頭的bar：View/common/_navbar.html.erb
&amp;lt;!-- Navigation --&amp;gt; &amp;lt;nav class=&amp;#34;navbar navbar-default navbar-fixed-top topnav&amp;#34; role=&amp;#34;navigation&amp;#34;&amp;gt; .... &amp;lt;/nav&amp;gt; 網站下方的footer：View/commom/_footer.html.erb
&amp;lt;!-- Footer --&amp;gt; &amp;lt;footer&amp;gt; ... &amp;lt;/footer&amp;gt; 然後修改
View/layouts/application.html.erb
(html全域樣式，不管頁面怎麼跳轉都會在)
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Book Reviews&amp;lt;/title&amp;gt; &amp;lt;%= csrf_meta_tags %&amp;gt; &amp;lt;%= stylesheet_link_tag &amp;#39;application&amp;#39;, media: &amp;#39;all&amp;#39;, &amp;#39;data-turbolinks-track&amp;#39;: &amp;#39;reload&amp;#39; %&amp;gt; &amp;lt;%= javascript_include_tag &amp;#39;application&amp;#39;, &amp;#39;data-turbolinks-track&amp;#39;: &amp;#39;reload&amp;#39; %&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;container-fluid&amp;#34;&amp;gt; &amp;lt;%= render &amp;#34;common/navbar&amp;#34; %&amp;gt; &amp;lt;%= yield %&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;%= render &amp;#34;common/footer&amp;#34; %&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &amp;lt;%= yield %&amp;gt; 是其他程式碼輸出的地方，也就是網頁的主要內容，會一直跳轉。</description>
    </item>
    
    <item>
      <title>許我一個美麗的Terminal</title>
      <link>https://ichennn.github.io/blog/2017/07/%E8%A8%B1%E6%88%91%E4%B8%80%E5%80%8B%E7%BE%8E%E9%BA%97%E7%9A%84terminal/</link>
      <pubDate>Sat, 22 Jul 2017 14:54:32 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/%E8%A8%B1%E6%88%91%E4%B8%80%E5%80%8B%E7%BE%8E%E9%BA%97%E7%9A%84terminal/</guid>
      <description>每天都去辦公室的話，自然就會想要把座位妝點的溫馨舒適：每天都開電腦，也自然就會想著要換個賞心悅目的漂亮桌面。
同理可證，每天都開terminal，怎麼捨得讓他黑壓壓一片字又小不拉機的還不去處理呢！
其實稍微爬一下國外的網站，就有很多如何客製化終端機的教學，但為了不要讓自己每次改過就忘，在此做個紀錄。
首先，叫出.bash_profile. 這個檔案
$ subl ~/.bash_profile 加上這兩段：
#enable color export CLICOLOR=&amp;#39;true&amp;#39; export LSCOLORS=&amp;#34;gxfxcxdxcxegedabagacad&amp;#34; #change hostname color shown in terminal export PS1=&amp;#34;\[\e[0;33m\]\u\[\033[m\]@\[\033[2;93m\]\h:\[\033[0;32m\]\w\[\033[m\]\$ &amp;#34; 其中
\u 是user name \h 是host name \w 是working directory $ 和 ＠ 看個人喜好，也可以換成其他喜歡的符號 字母後面的是顏色的色碼，一樣可以在網路上查到各式各樣的顏色 （關鍵字：terminal color code）
最後別忘了 source ~/.bash_profile
按照上面的設定，最後的成果長這樣：</description>
    </item>
    
    <item>
      <title>吃燒肉，學日文（？</title>
      <link>https://ichennn.github.io/blog/2017/05/%E5%90%83%E7%87%92%E8%82%89%E5%AD%B8%E6%97%A5%E6%96%87/</link>
      <pubDate>Sun, 14 May 2017 20:20:48 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/05/%E5%90%83%E7%87%92%E8%82%89%E5%AD%B8%E6%97%A5%E6%96%87/</guid>
      <description>來到日本之後，開學季的各種聚餐與社交（？）活動不斷，四月就已經吃了兩次燒肉（荷包君哭泣
但先不論肉好不好吃，錢噴了多少（咦) 最重要的還是要讓吃燒肉這個活動一次比一次得心應手啊！！（？
趁著還沒忘記（但這位大姐，已經隔了一個月了耶 囧），把一些吃飯中學到的單字記錄下來ＸＤ
推開門之後 首先，一進門服務生會先問幾個人，然後問有沒有抽菸需求（像燒肉、大阪燒這種聽起來很豪邁（？的店家似乎都會備有吸煙區）
「おタバコお吸いになりますか？」
「喫煙席、禁煙席どちらがよろしいでしょうか？」
大致有這兩種問法，因為隔太久了我有點記不清那天被問什麼ＸＤ但一開始沒預想到會被問這個問題，還愣了一下ＸＤ
開吃囉 「カルピ・カルビ」 肋骨旁邊的肉 （牛胸肉？ＸＤ），通常是不帶骨的，有點油花，應該說是 牛五花 比較恰當？也稱作**「バラ肉」**。
一拿到菜單就看到滿滿的カルピ啊ＸＤＤＤ這好像是一個從韓文翻譯過來的詞，所以不同的店家可能有些會使用カルピ，有些則會使用カルビ，但不論是哪個，都是一樣的意思。也有人說是「好肉」（？）的代名詞ＸＤ
網路上找了一張圖，大概是這種感覺：
(Source: https://www.sagae29.jp/parts/)
「ササミ肉」 雞胸肉。
這其實不是在燒肉店看到的，燒肉店大多以牛肉為主。不過如果到超市，很多熟食都是雞肉，「ササミ肉」就很常見了，就是一個很安全的部位，挑食如我也很少踩雷ＸＤ
「タン」 牛舌。
因為菜單其實都看不懂，所以只好全部點一輪（咦）然後這個就特別軟Ｑ嫩，有種&amp;hellip;.很像舌頭的觸感啊～～（不是很像而已，他就是啊！！
「ホルモン．モツ」 各種內臟。
因為不知道是什麼，就隨便點了一盤&amp;hellip;..結果咬不爛&amp;hellip;&amp;hellip;完全咬不爛&amp;hellip;&amp;hellip;這什麼巫術 囧
在維基上的定義是這樣的：「狭い意味では、小腸、大腸を、広い意味では正肉以外のかつて廃棄していた部位をも含む臓物肉全般が含まれ、皮、胃、肝臓、心臓、腎臓、子宮、肺、腸などを用いる。」
…….日本人好可怕。而且查了一下還有ホルモン專門店，人氣還高著呢～（黑人問號臉ＱＱ
「タレ．塩」 醬汁或鹽味。
好像大部分的店家同一種單品都會有這兩種口味可以選（好啦，其實我不知道是不是大部分，因為我只吃過兩家（欸）
一些阿哩阿雜的 「網（あみ）交換をお願いします」 換網子。不用全部清空，店員會跟你一起手忙腳亂（？）的把他們移走ＸＤＤＤ
「お皿もう一枚お願いします・ください」 再給我一個盤子。有時候人一多，或是杯盤狼藉之後（？）盤子就容易搞失蹤不夠用ＸＤ
實際寫完才發現其實單字沒有想像中的那麼多，大概大部分的時候還是忙著吃ＸＤ（不用急著自爆</description>
    </item>
    
    <item>
      <title>跨領域的不安與小確幸——京大情報學研究科 院試合格心得（下）</title>
      <link>https://ichennn.github.io/blog/2017/03/%E8%B7%A8%E9%A0%98%E5%9F%9F%E7%9A%84%E4%B8%8D%E5%AE%89%E8%88%87%E5%B0%8F%E7%A2%BA%E5%B9%B8%E4%BA%AC%E5%A4%A7%E6%83%85%E5%A0%B1%E5%AD%B8%E7%A0%94%E7%A9%B6%E7%A7%91-%E9%99%A2%E8%A9%A6%E5%90%88%E6%A0%BC%E5%BF%83%E5%BE%97%E4%B8%8B/</link>
      <pubDate>Tue, 28 Mar 2017 21:24:04 +0800</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/03/%E8%B7%A8%E9%A0%98%E5%9F%9F%E7%9A%84%E4%B8%8D%E5%AE%89%E8%88%87%E5%B0%8F%E7%A2%BA%E5%B9%B8%E4%BA%AC%E5%A4%A7%E6%83%85%E5%A0%B1%E5%AD%B8%E7%A0%94%E7%A9%B6%E7%A7%91-%E9%99%A2%E8%A9%A6%E5%90%88%E6%A0%BC%E5%BF%83%E5%BE%97%E4%B8%8B/</guid>
      <description>科系選擇＆跨領域——文系？理系？ 在進入念書考試心得之前，想先記錄一下關於選擇科系的眉角（？
跨領域當然有其難度，不過也許是最近這幾年的流行（？，打破文理分界的科系越來越多，有時候跨領域專長還有種潮潮的感覺（欸
以日本大學院來說，就我觀察到的大概呈現兩種趨勢：
**傳統、古老、較封閉的：**這種研究科通常底下有相對應的學部，每年新入生幾乎都是學部直升，不太容易跨考（無論是換學校或是換領域都是） **主打創新、標榜多元：**通常主打多元專業背景、文理融合、創新價值，較高機率出現在新成立不久的研究科或是底下沒有直接對應的學部，通常有一定比例的外國人 這兩種並沒有孰優孰劣，前者的好處應該是研究容易上軌道、深度也夠（畢竟學＋碩都6年了），後者就是給跨領域或對於自身專業另有想法的人一個選擇，可以迸出燦爛的火花（？也說不定。
目前觀察到比較明顯的例子大概是東大情報理工 v.s. 東大情報學環，有興趣可以研究一下他們的差異。
無論文科理科，通常到了大學院都要有一定的研究底子，以及語言能力（不然讀文本應該會被電爆），因此有些教授會要求先當一年研究生。
而強調文理不問的大學院，通常只要求基本學科達到一定水平，反而比較注重想法與溝通力之類的（≒英文），梳理到這裡似乎可以理解為何教授沒有要求我當一年研究生，我也能這麼傻傻愣愣地就跨過門檻進去了。
可是我實在很怕進得去出不來啊
報考京都大學——入學考試 情報學研究科AO入試 AO入試類似於台灣的推甄申請，主要以審查資料、小論文、面試等等手段來評斷合格與否。京大情報學研究科當中，只有社會情報專攻有AO入試，可能也與這個專攻標榜融合不同專業背景有關。
報名期間在四月，若合格則是十月入學。我當初看到不用考試，就一整個懶病逃避病發作，覺得這完全就是給我申請用的簡直天賜良機（當然後來發現完全不是這麼回事）
要求繳交的資料有：志望說明書、成績單、推薦信兩封、英文成績、願書等
強烈建議把募集要項一個字一個字看清楚看仔細，**「および」「または」**傻傻分不清楚的苦主在此。為了彌補眼殘我還多寄了一趟DHL結果還落榜，豈是一個慘字了得QQ
過程沒有太多可以分享的，因為我根本沒被面試到，就直接掰掰了。放榜當天還是有點難過的，雖然不是太意外，但一想到我還差得好遠好遠，隔天還要打起精神參加畢業典禮，就覺得人生好難（躺
曾經聽過「日本AO入試是要招收『異才』」這樣的說法，我想，社會情報AO期望收到的學生應該也是在這個領域中已經有傑出的成果或嘗試，甚至是從別的領域試圖與情報學做結合。
看重個性與潛力這種說法應該只適用學部吧ＸＤ大學院如果沒有相當的研究成果，應該是很難說服教授只憑幾張紙就把你收進門的。
猛然發現我在申請資料裡看起來應該就是個廢才吧ry
情報學研究科一般入試 等畢業典禮過了、大學最後一次期末也結束了，回到宿舍，翻開過去問，才真的有種要走入戰場的感覺。
因為並非本科系出身，也已經火燒眉毛了（此時距離考試倒數40天），於是我決定先從研究考古題開始。就像高中的閱讀測驗，老師總是教先看題目再看文章，過了這麼多年我才發現這招真的好用ＸＤ
所謂的研究考古題，並不是單純多寫幾次，而是觀察出題的範圍、方向與趨勢。
筆試總共分為三部份：情報學基礎、專門科目、一般論述
而成績則分為四部分：情報學基礎100點、專門科目200點、一般論述100點、英語200點、口頭試驗100
之前在網路上找到一篇日本考生的心得，分析因為學科部分都是以前上課的內容，因此得點不會差距太大，一般論述是個人本事，也無法短時間加強——因此社會情報的決勝點在英文成績。
這段話對我的鼓舞很大，因為廢才我什麼都沒有，就剛好有一張分數很高的多益（社會情報接受多益、托福、雅思任一種成績，如果不是英文超強或剛好需要考托福雅思，考多益絕對是CP值最高的選項，省錢省力省時間）
因此我的40日讀書目標是：
情報學基礎一定要唸到滾瓜爛熟不能失分 專門科目挑2~3個大主題細讀就好，力求不要落後學部考生太多 打點好面試的服裝＆背好自我介紹ＸＤ ＃情報學基礎 募集要項上有指定書目，其實就是大一計算機概論會用的那本：
J. Glenn Brookshear. Computer Science: An Overview. Addison-Wesley
不需要看日文版，因為考試可以寫英文啊ＸＤ而且很多專有名詞翻成片假名之後搞得像是在唸片假名讀本（？
這本我花了一整個學期把他唸好念熟，搭配台大開放式課程的影片服用，進度約是一週一單元。在學期中這麼做其實就等於多修了一門課，有時候難免想偷懶，但很慶幸當初有堅持下來。
形式是5題選3，出題的範圍是一整本。
一定會有一大題名詞解釋，有背有分；另一方面也可以幫助自己更了解基本概念 比較常出現的有operating system、algorithms、computation theory這三個單元 ＃專門科目 專門科目試卷非常厚一疊，17題選3，共有五種不同領域，根據第一志望的研究室來選擇題目。
計算機題組5題的組成每年其實大同小異：
Database 1題。主要是SQL、relational algebra、relational calculas、indexing、transaction management HCI 1題。主要是usability evaluation 的幾種方法及優缺點 Information Retrieval 1~2題。範圍很大，較難，從基本的precision/recall rate到B tree到recommendation system都有 AI 0~1題。decision tree、bayesian network等主題 情報教育 0~1題。應該是學部的一門課，主要是e-learning的概念和方法。 因為時間太少了，我決定只以資料庫跟HCI為主力目標，其他大概念一下，有考到算我撿到（欸</description>
    </item>
    
    <item>
      <title>跨領域的不安與小確幸——京大情報學研究科 院試合格心得（上）</title>
      <link>https://ichennn.github.io/blog/2017/03/%E8%B7%A8%E9%A0%98%E5%9F%9F%E7%9A%84%E4%B8%8D%E5%AE%89%E8%88%87%E5%B0%8F%E7%A2%BA%E5%B9%B8%E4%BA%AC%E5%A4%A7%E6%83%85%E5%A0%B1%E5%AD%B8%E7%A0%94%E7%A9%B6%E7%A7%91-%E9%99%A2%E8%A9%A6%E5%90%88%E6%A0%BC%E5%BF%83%E5%BE%97%E4%B8%8A/</link>
      <pubDate>Mon, 27 Mar 2017 01:22:15 +0800</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/03/%E8%B7%A8%E9%A0%98%E5%9F%9F%E7%9A%84%E4%B8%8D%E5%AE%89%E8%88%87%E5%B0%8F%E7%A2%BA%E5%B9%B8%E4%BA%AC%E5%A4%A7%E6%83%85%E5%A0%B1%E5%AD%B8%E7%A0%94%E7%A9%B6%E7%A7%91-%E9%99%A2%E8%A9%A6%E5%90%88%E6%A0%BC%E5%BF%83%E5%BE%97%E4%B8%8A/</guid>
      <description>寫在前面——跨領域 轉換領域聽起來是一件稀鬆平常的事，但做起來總是不輕鬆的。
除了心底時常會冒出質疑自己的聲音外，也更容易感到孤立無援，畢竟走的是一條與身邊的人截然不同的路，很多事情都只能強壓下不安去面對，最多就是事後能在聊天過程中一笑帶過而已。
大學唸的是某個純到不行的文院科系，大三的時候雙主修經濟，原本的規劃是研究所就轉念經濟，好歹也算是本科系的。但是，果然人算不如天算，最後決定報考的卻是京都大學情報學研究科社會情報專攻ＸＤ
情報是什麼啊？很多不太懂日文的朋友會這麼問道。情報呢，就是中文的資訊啊（笑
因此這是一篇跨得很大、從南極跨到北極（？的心得。（而且很多廢話
時程總覽與我的大轉彎時期 大轉彎時期聽起來好像什麼歷史事件一樣ＸＤ
基本上決定要轉考情報學領域是很晚的事情，認真開始唸書當然又是更晚的事情，大概跟地球的歷史當中人類出現的時間點差不多吧 囧
我的留學時程大致上長這樣，其中有很多跟學校、報名不相關的東西，正確來說比較像是心路歷程：
可以發現，其實我大部分的時間都在迷惘跟耍廢啊orz
我算是個習慣於及早開始規劃事情的人，因此在確定要考日本大學院之後，一路從雙主修的課程安排、研究計畫撰寫、找教授、筆試內容⋯⋯都想過一輪了，但是呢，還是老話一句，計畫趕不上變化啊～
大轉彎的結果就是最後半年搞得像趕場一樣處處驚險orz
報考京都大學——準備階段 雖然我在時程總覽當中有寫到筑波大學，但那其實算是我的備案，再者，考慮到報名費神貴的問題，最後決定還是全力準備京都大學就好。
AAO 京都大學的AAO是個相當奇妙的系統，美其名是由學校做統一接洽窗口，可是又只有中港台的留學生才需要跑這個流程。（聽說是因為之前中國留學生有學經歷不實的問題才導致這個系統的出現）
很多人會感到很困惑，到底應該先AAO？先聯絡教授？雖然網頁上寫說過了AAO再聯絡教授，可是教授又不知道我是誰這樣也能過？那如果一直沒消息難道我要傻傻的等？萬一被拒絕真的不能申請第二次嗎⋯⋯？
我到現在也不知道標準答案orz 大概是因人而異吧（毫無參考價值
我自己當初是照著官方流程，也就是先AAO後找教授，可能情報學研究科的老師都習慣光速回信（？，我送出申請大概兩小時就通過了（驚嚇）但是我興高采烈地寄信給教授之後，教授又光速回信說：
「抱歉哦，我要退休了」
⋯⋯蛤？經過肉身測試，教授很有可能不知道這系統到底是幹嘛的ＸＤ
但反正也通過了，我就寄信找了另一位領域接近的教授，後來也順利進入這位教授的研究室惹 ヽ(●´∀`●)ﾉ
不過後來有聽說，應該要先跟教授聯絡比較好，有的教授可能會因為不知道你哪位就放置play或是拒絕。現在想想，我真的運氣不錯ＸＤ
另外有個真實性不明的不負責任小道消息，AAO會提供好幾種選項（拒絕的狀況）給教授，包括退休、收滿、研究方向無法指導等等，還有一個翻成白話是我覺得這學生不好，叫他不要再來申請了。所以如果不幸被一位教授拒絕，其實還是有可能再次提出申請的，除非⋯⋯（乾 好傷人
聯絡教授 寄了信給我未來的指導教授，信裡附上了SOP跟個人簡歷，還有大學時代修過課的一位老師替我寫的推薦信（就是給AAO的那些東西而已）。沒寫研究計劃，因為⋯⋯不會寫orz
跨領域的弱勢此時就顯現出來了，我真的不會寫⋯⋯連亂掰都沒有頭緒的那種不會。一方面是我對這個領域的研究、論文該是什麼模式不太熟悉，另一方面就是我僅有的淺薄知識也不足以支撐我掰出一篇研究計畫。
所以我就想，與其硬著頭皮寫一篇讓人搖頭的研究計畫，不如乾脆別寫。
事實證明這是對的，因為教授根本沒問這個。（不是說這個不重要哦，原因後述）
skype其實很快就結束了，教授滿親切的，談話也沒有我原先想的那麼嚴肅可怕，問了一些基本（？題：
不是相關科系的你，對這個領域了解多少？有拿過去問寫寫看嗎？ 來日本留學有經濟壓力嗎？ 除了京大還有申請別的學校嗎？ 結論其實也很簡單，就是考上了就收，努力唸書啊～
腦子稍微冷卻一點之後，有如大夢初醒。這幾天準備的擬答命中率是0，不禁開始檢討我的思維發生了什麼事，為什麼我以為老師在意的他似乎一點也不在意？
只能說，我似乎還沒進入狀況，簡單來說**我以為應該著重在我的賣點，殊不知重點在於該如何彌補我的缺點**。
比起一些冠冕堂皇的溢美之詞，我覺得教授對於實際面的問題更有興趣就是了。畢竟真的入學後，很多事不能光靠嘴砲解決。當然如果背景與能力非常足夠，教授就會對你的動機跟研究主題很有興趣了（應該吧xd）
於是我就連滾帶爬（？的衝出門去寄EMS了。
索取過去問 索取考古題的方法各研究科的網站都會寫，有些有電子檔有些則要寄信去拿。從台灣寄EMS的話，大約3天會到，內附回郵信封跟郵票就可以了。當初有點苦惱到底該怎麼放，提供一下我的作法:
（由外到內）EMS信封 ← A4信封(上面用紅筆寫過去問請求之類的，依網頁規定) ← 回郵信封、郵票¥900 日本郵票可在牯嶺街上的郵幣社買到，旁邊就是南海郵局，兩個願望一次滿足～ 另外EMS是看重量計價，所以如果要索取的資料很多很重的話可能要多附一點郵票。</description>
    </item>
    
    <item>
      <title>在Hugo寫完文章，卻push不上github怎麼辦？</title>
      <link>https://ichennn.github.io/blog/2017/03/%E5%9C%A8hugo%E5%AF%AB%E5%AE%8C%E6%96%87%E7%AB%A0%E5%8D%BBpush%E4%B8%8D%E4%B8%8Agithub%E6%80%8E%E9%BA%BC%E8%BE%A6/</link>
      <pubDate>Tue, 21 Mar 2017 00:33:37 +0800</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/03/%E5%9C%A8hugo%E5%AF%AB%E5%AE%8C%E6%96%87%E7%AB%A0%E5%8D%BBpush%E4%B8%8D%E4%B8%8Agithub%E6%80%8E%E9%BA%BC%E8%BE%A6/</guid>
      <description>今天突然心血來潮想說自己來改改看hugo theme的樣式，CSS門外漢的我，就每個檔案都給它打開來研究研究，然後手賤的塗塗改改，想說反正hugo server 上面看爽的就好，改壞了大不了重新git clone下來就好惹～～
結果，門外漢的我還是手賤，push了一些也不知道自己在改啥的東西上去後&amp;hellip;&amp;hellip;就發現放hugo souce的repo裡的submodule好像不同步&amp;hellip;&amp;hellip;？
…&amp;hellip;我真的不知道我剛剛做了什麼（崩潰
為什麼public裡面的靜態網頁push不上去ＱＱＱ救命哦
想當然，就算喊破喉嚨應該也是沒人能救我 囧
自己的手賤自己救，拜過估狗大神後還是把它弄好了（雙手合十
所以我到底對他做了什麼呢？ …….我真的不知道啦（哭
→可能原因： push順序錯誤： 因為submodule的內容不會被連帶更新，所以要先push submodule再push上一層（如果有需要的話），不然從上一層repo連結過去會是前一次push的內容。
只要連過去後發現，在顯示branch:master的地方會顯示tree:&amp;lt;上一次的commit&amp;gt;，應該就是不小心忘了先push submodule的目錄。
此時在submodule裡面嘗試push的話，就會顯示：
Everything up-to-date 一開始看到我真的是滿頭問號orz明明最新的內容都push不上去你還騙我說什麼up-to-date&amp;hellip;.
解決方法 參照這篇 [註一]，總結來說就是：
$ cd &amp;lt;submodule directory&amp;gt; $ git checkout master $ git merge HEAD@{1} $ git push origin master 因為現在其實有兩個branch。
$ git branch * (HEAD detached from &amp;lt;上一次的commit&amp;gt;) master 除了master以外，另一個就是我們現在所處的branch 。所以解決方法就是要把這兩個莫名其妙被我搞出來的東西merge在一起。當輸入merge指令之後，會看到：
$ git merge HEAD@{1} Updating 300cd65..08987fb Fast-forward blog/.DS_Store | Bin 6148 -&amp;gt; 6148 bytes blog/{year-month-day =&amp;gt; 2017}/.</description>
    </item>
    
    <item>
      <title>如何用Hugo架出乾淨簡潔的部落格</title>
      <link>https://ichennn.github.io/blog/2017/03/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%9E%B6%E5%87%BA%E4%B9%BE%E6%B7%A8%E7%B0%A1%E6%BD%94%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/</link>
      <pubDate>Mon, 20 Mar 2017 20:28:57 +0800</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/03/%E5%A6%82%E4%BD%95%E7%94%A8hugo%E6%9E%B6%E5%87%BA%E4%B9%BE%E6%B7%A8%E7%B0%A1%E6%BD%94%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/</guid>
      <description>從小時候就一直覺得寫自己的部落格是一件很潮很厲害的事，當然也經營過好幾個，從最一開始的yahoo部落格、無名小站到天空部落，前前後後也寫了好幾年，可是最後都虎頭蛇尾收場ＸＤ還是別提了
但是從很早之前，我就一直對這些部落格平台有一些小小的不滿（？
首先，樣板很固定，用過的幾個當中，大概只有天空算比較自由，其他就&amp;hellip;&amp;hellip;xd 很多時候只是想寫一些自己的碎碎念，並不想要知道有多少人看過，也不想要有人對此發表評論。 有廣告有廣告有廣告啊啊啊 直到最近開始學著用github之後，意外發現可以利用github pages存放靜態頁面。於是又重新燃起了我寫部落格的熊熊大火啊
Hugo是什麼？ 簡單來說就是一個靜態網頁生成器，簡單快速好用。
可以放在任何可host網站的空間，如github或FTP。 用Go語言寫成，據說比Jekyll穩定且快（當然也比較簡單ＸＤ
這個網站怎麼生出來的？ 有多簡單好用呢？用Hugo架一個部落格，大概需要以下幾個步驟，根據官網的Quick start這個過程大概只要2分鐘：
下載hugo hugo new site &amp;lt;sitename&amp;gt;，然後cd進themes，網路上隨便找個順眼的主題，把它git clone下來（ps. 如果想放github上的話，這邊請用submodule） hugo new post/&amp;lt;title&amp;gt;.md ，寫點什麼東西進去 hugo server 就可以在本地看到熱騰騰的網站了 好了，結束收工（欸
不是啦，其實還是有很多細節可以設定，在config.toml 當中可以客製化一些細節，也可自己寫一個css覆蓋原本的主題做微調。真的要鑽研也是研究不完，像是short code我到現在還是沒弄懂 囧
Hugo官網裡面有很多好玩的設定，留著日後慢慢看ＸＤ
Hosting on Github 然後呢？總不能這麼簡單漂亮的網站只有我自己看得到吧？
我當初為了研究怎麼把它放上github，搞了一天一夜快要瘋掉，官網上的教學一個很複雜不想看懂（欸），一個怎麼試都失敗搞得我很火大ry
順帶一提github pages有分成user page跟project page兩種，托hugo的福，我之前一直不知道原來有分別，詳細差別參見官方。
最後在各種英文日文網站的教學拼拼湊湊下，終於成功使用user page放上去惹～（也就是網址是github.io結尾）：
Step1: 準備兩個repository 一個命名為&amp;lt;username&amp;gt;.github.io，用來放產生的靜態頁面；另一個隨意，用來放Hugo site的source code。
Step2: 利用hugo架網站囉 $ hugo new site &amp;lt;sitename&amp;gt; $ cd &amp;lt;sitename&amp;gt; $ hugo new post/&amp;lt;title&amp;gt;.md #文章會放在content/post裡 $ git init $ git remote add origin &amp;lt;隨意&amp;gt;.</description>
    </item>
    
  </channel>
</rss>
