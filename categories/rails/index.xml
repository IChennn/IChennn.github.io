<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails on Murmuring</title>
    <link>https://ichennn.github.io/categories/rails/</link>
    <description>Recent content in Rails on Murmuring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Jul 2017 17:54:54 +0900</lastBuildDate><atom:link href="https://ichennn.github.io/categories/rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Ruby on Rails] 部署到Heroku囉！</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E9%83%A8%E7%BD%B2%E5%88%B0heroku%E5%9B%89/</link>
      <pubDate>Sat, 22 Jul 2017 17:54:54 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E9%83%A8%E7%BD%B2%E5%88%B0heroku%E5%9B%89/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何解決上傳到Heroku時可能碰到的一些亂七八糟的小毛病。以及如何在Heroku上實現使用者上傳圖片的功能。
##第一次部署到Heroku
首先，安裝Heroku的 gem。再來，註冊一個Heroku帳號。
接下來照著這篇：https://www.railstutorial.org/book/beginning 的1.5章將Rails的設定都弄好就行了！
網路上有一些聲音認為Heroku實在是太囉唆麻煩，一大堆設定，搞不好又會上傳失敗，作為一個server實在是讓人惱火。
嘛，確實ＸＤ不過以一個新手的觀點來說，因為是免費的（當然，需要更大的空間的話就要付費的），而且玩過Heroku的人多，就算碰到什麼問題也總是能估狗到答案的，就這兩點來說還是滿不錯的啦。
heroku update 在一般情況下，要將專案push到Heroku上，是這樣下指令的：
git push heroku master
但在進行Rails專案時，可能會開好幾個branch，假設今天要把branch h03 push到heroku 上面的話也很簡單，只要：
git push heroku h03:master
然後 heroku run rake db:migrate
就可以用 heroku open 打開熱騰騰的網站了！
另外，經過實測，有幾點問題值得紀錄：
heroku上無法顯示flashes (解決方式未知，因為覺得flash很醜，乾脆就不用了ＸＤ) 在app/assets/stylesheets/application.scss 當中加入 @import &amp;#34;bootstrap-sprockets&amp;#34;; @import &amp;#34;bootstrap&amp;#34;; 會使heroku無法push (原因未知)
這兩點因為沒什麼必須性，因此為了省麻煩我就都直接刪掉了ＸＤ
解決在heroku上圖片無法顯示的問題 好不容易上傳成功，結果一打開——哇，所有的圖片都不見惹～～～的這種惱火感真的很讓人難忘啊&amp;hellip;
不過解決方法也不複雜，把設定改一下就行了。只要到Config/environments/production.rb 當中，將
config.serve_static_files = ENV[&amp;#39;RAILS_SERVE_STATIC_FILES&amp;#39;].present? 改成
config.serve_static_assets = true 上傳圖片＋Heroku 好的，終於辛辛苦苦把上傳圖片的功能做好了，想要傳到heroku上面自己看著爽一下，殊不知&amp;hellip;&amp;hellip;
heroku不能儲存使用者自己上傳的圖片啊！！！！
（抱頭痛哭
好的，哭完了還是要來想想辦法
1.AWS S3
先說結論，利用AWS S3儲存圖片就可以解決這個問題了
步驟參照這篇：http://blog.qinfeng.io/posts/1383092</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] Carrierwave實作圖片上傳功能</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-carrierwave%E5%AF%A6%E4%BD%9C%E5%9C%96%E7%89%87%E4%B8%8A%E5%82%B3%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sat, 22 Jul 2017 17:54:35 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-carrierwave%E5%AF%A6%E4%BD%9C%E5%9C%96%E7%89%87%E4%B8%8A%E5%82%B3%E5%8A%9F%E8%83%BD/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何用Carrierwave這個gem實作圖片上傳功能。
上傳圖片功能 首先要安裝carrierwave 跟rmagick 這兩個gem
Gemfile :
gem &amp;#39;carrierwave&amp;#39; gem &amp;#39;rmagick&amp;#39; 小插曲 在安裝rmagick之前，要先用homebrew 安裝imagemagick
$ brew install imagemagick 然後安裝rmagick 的時候，可能會出現這樣的錯誤訊息：
Building native extensions. This could take a while... ERROR: Error installing rmagick-2.16.0.gem: ERROR: Failed to build gem native extension. /Users/Hung/.tokaido/Rubies/2.2.2-p95/bin/ruby -r ./siteconf20170629-2407-7s934e.rb extconf.rb checking for clang... yes checking for Magick-config... no checking for pkg-config... no Can&amp;#39;t install RMagick 2.16.0. Can&amp;#39;t find Magick-config or pkg-config in /Users/Hung/.</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 實作簡易的搜尋和最新消息功能</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%AF%A6%E4%BD%9C%E7%B0%A1%E6%98%93%E7%9A%84%E6%90%9C%E5%B0%8B%E5%92%8C%E6%9C%80%E6%96%B0%E6%B6%88%E6%81%AF%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sat, 22 Jul 2017 17:40:26 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%AF%A6%E4%BD%9C%E7%B0%A1%E6%98%93%E7%9A%84%E6%90%9C%E5%B0%8B%E5%92%8C%E6%9C%80%E6%96%B0%E6%B6%88%E6%81%AF%E5%8A%9F%E8%83%BD/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何實作最新消息功能和簡易的搜尋功能，不使用任何gem。當然，有很多現成的gem可以達到非常強大的搜尋功能，若有需要也想找機會試試（可是功能越強大說明通常也就越難懂ＸＤ（哭）。
簡易搜尋功能 以搜尋書本為例：
想達到的功能是在書本列表當中可以搜尋想要的書（title和description都可以對應）
首先，找到想放置搜尋bar的頁面：app/views/groups/index.html.erb
加入下面這一段code，做一個陽春的搜尋框
&amp;lt;div&amp;gt; &amp;lt;%= form_tag groups_path, id: &amp;#34;search-form&amp;#34;, :method =&amp;gt; &amp;#34;get&amp;#34; do %&amp;gt; &amp;lt;%= text_field_tag :search, params[:search], class: &amp;#39;btn btn-default&amp;#39;, placeholder: &amp;#34;Search Books&amp;#34; %&amp;gt; &amp;lt;%= submit_tag &amp;#34;Search&amp;#34;, class: &amp;#39;btn btn-default&amp;#39;, name: nil %&amp;gt; &amp;lt;% end %&amp;gt; &amp;lt;/div&amp;gt; 再來找到controller：app/controllers/groups_controller.rb
更改index的部分，這樣才會顯示搜尋結果。記得paginate的部分也要寫，不然搜尋結果的頁面會報錯
def index if params[:search] @groups = Group.search(params[:search]).recent.paginate(:page =&amp;gt; params[:page], :per_page =&amp;gt; 10) else @groups = Group.all.recent.paginate(:page =&amp;gt; params[:page], :per_page =&amp;gt; 10) end end 最後是model的部分：app/models/group.</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 好用的will_paginate及simpl_ form_for</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%A5%BD%E7%94%A8%E7%9A%84will_paginate%E5%8F%8Asimpl_-form_for/</link>
      <pubDate>Sat, 22 Jul 2017 17:10:16 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%A5%BD%E7%94%A8%E7%9A%84will_paginate%E5%8F%8Asimpl_-form_for/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何使用will paginate 及 simple form for這兩個方便又好用的gem來使網站變得更美觀。
use simple_form_for Simple_form_for 是一個好用的gem，可以自動調整格式
如果還沒安裝的話，記得先在gemfile裡面新增gem &amp;quot;simple_form&amp;quot; ，然後 bundle install
下一步：
rails generate simple_form:install --bootstrap 執行boostrap的設定
就可以使用simple_form_for了！
使用方法也很簡單，只要將原本是form_for 的部分都替換成simple_form_for 並照著規定的格式更改內容就行了。
&amp;lt;%= simple_form_for @group do |f| %&amp;gt; &amp;lt;%= f.input :description, input_html: { class: &amp;#34;form-horizontal&amp;#34;, :rows =&amp;gt; 4} %&amp;gt; &amp;lt;% end %&amp;gt; :rows 可以用來調輸入框的高度
這是使用simple_form_for的效果：
Simple_form_for會自動偵測不可空白的欄位，並給出警告：
Reference : use form_for
&amp;lt;%= form_for @group do |f| %&amp;gt; &amp;lt;%= f.label &amp;#34;description&amp;#34;, :class =&amp;gt; &amp;#34;string optional control-label&amp;#34; %&amp;gt; &amp;lt;%= f.</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 文章刪除修改實作、修改時區和換行</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E6%96%87%E7%AB%A0%E5%88%AA%E9%99%A4%E4%BF%AE%E6%94%B9%E5%AF%A6%E4%BD%9C%E4%BF%AE%E6%94%B9%E6%99%82%E5%8D%80%E5%92%8C%E6%8F%9B%E8%A1%8C/</link>
      <pubDate>Sat, 22 Jul 2017 16:52:00 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E6%96%87%E7%AB%A0%E5%88%AA%E9%99%A4%E4%BF%AE%E6%94%B9%E5%AF%A6%E4%BD%9C%E4%BF%AE%E6%94%B9%E6%99%82%E5%8D%80%E5%92%8C%E6%8F%9B%E8%A1%8C/</guid>
      <description>網站傳送門： https://gentle-inlet-97986.herokuapp.com/
主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄如何實作Rails 101教程當中沒有提供答案的文章修改刪除功能。
文章刪除修改實作 在app/controllers/posts_controller.rb 下定義edit method
def edit @group = Group.find(params[:group_id]) @post = Post.find(params[:id]) end 要記得@group 跟 @post 都要定義！不然會出現 NoMethodError
無論是Edit, update, destroy都需要
另外，edit介面也要同時加上@group跟@post，用array 方式表示，系統才能判斷是哪一個group裡面的哪一個post
&amp;lt;%= simple_form_for [@group, @post] do |f| %&amp;gt; ..... Simple_format ＆日期顯示 換行用，只要將要換行的內容放入simple_format() 當中就可以了
&amp;lt;% @posts.each do |post| %&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&amp;lt;%= simple_format(post.content) %&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;%= post.user.email %&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;&amp;lt;%= post.created_at.to_date %&amp;gt;&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;% end %&amp;gt; 關於日期的顯示方式，若是只使用最簡單的post.created_at 會以這樣的方式呈現：
若想要讓樣式看起來簡潔一些，可以加上created_at.to_date （或是 created_at.strftime(&amp;quot;%Y-%m-%d&amp;quot;) ）就會只顯示到日期，不會出現後面的UTC之類的
時區更改 想要改到自己地區的時區，到config/application.rb 改設定：</description>
    </item>
    
    <item>
      <title>[Ruby on Rails] 基本View構成——HTML&amp;CSS</title>
      <link>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%9F%BA%E6%9C%ACview%E6%A7%8B%E6%88%90htmlcss/</link>
      <pubDate>Sat, 22 Jul 2017 15:43:37 +0900</pubDate>
      
      <guid>https://ichennn.github.io/blog/2017/07/ruby-on-rails-%E5%9F%BA%E6%9C%ACview%E6%A7%8B%E6%88%90htmlcss/</guid>
      <description>這是第一次用Ruby on Rails 做出一個完整的網站。
已經架在Heroku上了： https://gentle-inlet-97986.herokuapp.com/
可能跑的有點慢，畢竟整個專案很肥ＸＤ
這次的主題是一個書評網站，需要登入才能發表評論，可以自行上傳書的圖片，也可以搜尋現有的書籍資訊。
（基本架構是照著Rails 101的教學做出來的，自己另外再加了一些小功能）
此篇主要紀錄一些和View構成有關的部分。
HTML partial 顧名思義，就是把一份html檔拆成好多部分來組合
基本上，一個頁面可以拆成三個部分：navbar, footer, 中間的內容。這麼拆的好處是，可以將上下兩條bar設定成全域樣式，中間的內容無論怎麼跳轉，都不會影響到上下方的bar
網站上頭的bar：View/common/_navbar.html.erb
&amp;lt;!-- Navigation --&amp;gt; &amp;lt;nav class=&amp;#34;navbar navbar-default navbar-fixed-top topnav&amp;#34; role=&amp;#34;navigation&amp;#34;&amp;gt; .... &amp;lt;/nav&amp;gt; 網站下方的footer：View/commom/_footer.html.erb
&amp;lt;!-- Footer --&amp;gt; &amp;lt;footer&amp;gt; ... &amp;lt;/footer&amp;gt; 然後修改
View/layouts/application.html.erb
(html全域樣式，不管頁面怎麼跳轉都會在)
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Book Reviews&amp;lt;/title&amp;gt; &amp;lt;%= csrf_meta_tags %&amp;gt; &amp;lt;%= stylesheet_link_tag &amp;#39;application&amp;#39;, media: &amp;#39;all&amp;#39;, &amp;#39;data-turbolinks-track&amp;#39;: &amp;#39;reload&amp;#39; %&amp;gt; &amp;lt;%= javascript_include_tag &amp;#39;application&amp;#39;, &amp;#39;data-turbolinks-track&amp;#39;: &amp;#39;reload&amp;#39; %&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;container-fluid&amp;#34;&amp;gt; &amp;lt;%= render &amp;#34;common/navbar&amp;#34; %&amp;gt; &amp;lt;%= yield %&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;%= render &amp;#34;common/footer&amp;#34; %&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &amp;lt;%= yield %&amp;gt; 是其他程式碼輸出的地方，也就是網頁的主要內容，會一直跳轉。</description>
    </item>
    
  </channel>
</rss>
